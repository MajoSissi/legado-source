[

  {
    "bookSourceComment": "建议登录\n\n酷安 @吉王义昊\nGitHub：https://github.com/jiwangyihao/source-j-legado\n\n# 关于许可的额外声明（在线版本参见 GitHub，以在线版本为准）\n\n- 当许可证与本声明冲突时，以本声明为准；\n- 对于本仓库中的任意代码片段：按照 `MPL 2.0` 中有关约定执行；\n- 对于本仓库中的某一完整书源的转载或二次开发，需满足以下全部条件：\n  - 在[本仓库](https://github.com/jiwangyihao/source-j-legado)的 `issue` 中提出请求并具体说明转载地址、二次开发后的书源开源地址以及其他必要信息；\n  - 等待原作者（即本仓库的初始所有者和初始代码贡献者 [@jiwangyihao](https://github.com/jiwangyihao)）查看并通过 `issue` 或依据原作者要求更改转载方式或补充更详细的信息。\n  - 考虑到本项目弃坑的可能，新 `issue` 开启后超过 20 个工作日原作者没有回复或者原作者回复要求更改的 `issue` 在更改后超过 20 个工作日原作者没有回复即视为原作者通过该 `issue`：\n    - 此处的 `issue` 仅包括在[本仓库](https://github.com/jiwangyihao/source-j-legado)开启的，处于「开启状态」的 issue。（也就是说，请不要在已经关闭的 issue 中回复）。\n    - 对于此种方式通过的 issue，转载/二次开发者仍应当遵守本声明中已经写明的相关约定。\n  - 不得上传至源仓库或整理至`非轻小说专用`的书源合集中并应当避免其他人将转载/二次开发版本上传至源仓库或整理至`非轻小说专用`的书源合集中：\n    - 关于轻小说的定义的额外说明：不包括国内的原创网络文学作品（如 `SF 轻小说` 中的原创轻小说以及`起点中文网`中标签包含轻小说的作品）。\n    - 轻小说专用的定义：有且仅有想看轻小说的人可能会添加。\n  - 必须在转载/二次开发地址的明显位置完整包含本声明的全部内容。\n  - 必须保留源注释中原有的更改记录。",
    "bookSourceGroup": "轻小说,哔轻类似物",
    "bookSourceName": "轻之文库轻小说",
    "bookSourceType": 0,
    "bookSourceUrl": "https://m.wenkuchina.com",
    "bookUrlPattern": "",
    "concurrentRate": "",
    "coverDecodeJs": "",
    "customOrder": -41323,
    "enabled": true,
    "enabledCookieJar": true,
    "enabledExplore": true,
    "exploreUrl": "@js:\nres = []\n\n//筛选链接生成\nfunction generateFilterUrl(new_values) {\n  values = {\n    order: 'lastupdate',\n    anime: '0',\n    sortid: '0',\n    typeid: '0',\n    words: '0',\n    rgroupid: '0',\n    update: '0',\n    isfull: '0',\n    page: '{{page}}',\n  }\n  for (key in new_values) {\n  \t  values[key]=new_values[key]\n  \t}\n  return source.bookSourceUrl + '/wenku/' + values.order + '_' + values.anime + '_' + values.sortid + '_' + values.typeid + '_' + values.words + '_' + values.rgroupid + '_' + values.update + '_' + values.isfull + '_' + values.page + '.html';\n}\n\n//书架\nuser = ajax(source.bookSourceUrl + \"/user.php\")\n//java.toast(user)\ntry {\nif (user.match(/<h2 class=\"aui-center-title\">(登录|错误).*轻之文库轻小说.+<\\/h2>/gi)) {\n  //未登录\n  res.push(\n    {\n      title: `>> 我的书架 | 未登录 <<`,\n      url: '',\n      style: { layout_flexGrow: 1, layout_flexBasisPercent: 1 }\n    })\n} else {\n  //已登录\n  res.push(\n    {\n      title: `>> 我的书架 | ${user.match(/<span class=\"user-name\">.+<\\/span>/gi)[0].replace(/<\\/?span.*?>/gi,'')} <<`,\n      url: '',\n      style: { layout_flexGrow: 1, layout_flexBasisPercent: 1 }\n    })\n  bookcase = ajax(source.bookSourceUrl + \"/bookcase.php\")\n  bookcase.match(/<select[\\s\\S]+?<\\/select>/gi)[0].match(/<option.+<\\/option>/gi).forEach(option => {\n    res.push(\n      {\n        title: option.match(/>.*(?=<)/gi)[0].replace('>', ''),\n        url: source.bookSourceUrl + \"/bookcase.php?classid=\" + option.match(/value=\\\".+?(?=\\\")/gi)[0].replace(/(value=\\\")/gi, ''),\n        style: { layout_flexGrow: 1 }\n      })\n  })\n}\n} catch (e) {\n  throw(\"书架加载失败：\\n\"+e+\"\\n登录页源码：\\n\"+user)\n}\n\ncontent = ajax(source.bookSourceUrl + \"/wenku/\")\ncontent.match(/排序[\\s\\S]+?<\\/div>/gi)[0].match(/<a.+<\\/a>/gi).forEach(a => {\n  let filter = {}\n  let sortTitle = a.match(/>.+(?=<)/gi)[0].replace('>', '')\n  let type = \"order\"\n  let value = a.match(/\\/[^_/]+(?=_)/gi)[0].replace('/', '')\n  filter[type]=value;\n  content.match(/作品分类[\\s\\S]+?<\\/div>/gi)[0].match(/<a.+<\\/a>/gi).forEach((v, i) => {\n    let v_type = \"anime\"\n    let v_value = v.match(/\\/[^_/]+_\\d+(?=_)/gi)[0].replace(/\\/[^_/]+_/gi, '')\n    filter[v_type]=v_value;\n    if (i == 0) {\n      res.push(\n        {\n          title: `>> 作品分类 | ${sortTitle} <<`,\n          url: generateFilterUrl(filter),\n          style: { layout_flexGrow: 1, layout_flexBasisPercent: 1 }\n        })\n    } else {\n      res.push(\n        {\n          title: v.match(/>.+(?=<)/gi)[0].replace('>', ''),\n          url: generateFilterUrl(filter),\n          style: { layout_flexGrow: 1 }\n        })\n    }\n  })\n})\n\ncontent.match(/排序[\\s\\S]+?重置/gi)[0].match(/<li[\\s\\S]+?<\\/li>/gi).forEach(li => {\n  let sortTitle = li.match(/>.+(?=<\\/h3>)/gi)[0].replace('>', '')\n  res.push(\n    {\n      title: `>> ${sortTitle} <<`,\n      url: '',\n      style: { layout_flexGrow: 1, layout_flexBasisPercent: 1 }\n    })\n  li.match(/<a.+<\\/a>/gi).forEach((v, i) => {\n    if (i != 0) {\n      res.push(\n        {\n          title: v.match(/>.+(?=<)/gi)[0].replace('>', ''),\n          url: v.match(/href=\"[^\"]+(?=\")/gi)[0].replace('href=\"',\"\").replace(\"1.html\",\"{{page}}.html\"),\n          style: { layout_flexGrow: 1 }\n        })\n    }\n  })\n})\ntagContent = ajax(source.bookSourceUrl + \"/taglist/1.html\")\nres.push(\n  {\n    title: '>> 标签分类 <<',\n    url: '',\n    style: { layout_flexGrow: 1, layout_flexBasisPercent: 1 }\n  })\ntry {\ntagContent.match(/标签分类<\\/h3>[\\s\\S]+?重置/gi)[0].match(/<a.+<\\/a>/gi).forEach((v, i) => {\n  res.push(\n    {\n      title: v.match(/>.+(?=<)/gi)[0].replace('>', '').replace(\"&nbsp\",\"\"),\n      url: v.match(/href=\"[^\"]+(?=\")/gi)[0].replace('href=\"',\"\").replace(\"1.html\",\"{{page}}.html\"),\n      style: { layout_flexGrow: 1 }\n    })\n})\n} catch (e) {\n  throw(\"标签页解析错误：\"+e+\"\\n标签页源码：\\n\"+tagContent)\n}\nJSON.stringify(res)\n//throw(JSON.stringify(res))",
    "header": "{\n\"Referer\": \"https://m.wenkuchina.com/\",\n\"User-Agent\":\"\",\n\"Accept-Language\":\"zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6\",\n\"Accept\":\"*/*\"\n}",
    "jsLib": "function errorReg() {\n  return /(java.net.+Exception)|(okhttp.+Exception)|(error code: 1015)|(503 Service Temporarily Unavailable)|(Parse error.+in.+wwwroot.+php)|(_cf_chl_opt|challenges.css)|(<center.+>.+不支持)|(章节内容不支持该浏览器显示)/gi\n}\nfunction ajax(url) {\n  const { java, cookie } = this;\n  let content = \"\";\n  let time=1;\n  \tcontent = java.ajax(url);\n  \twhile (String(content).match(errorReg())) {\n    if (time>10) {\n  \t    java.toast(\"重试10次后仍请求失败：\"+url)\n  \t    throw(\"重试10次后仍请求失败：\"+url+content)\n  \t    break;\n    \t}\n    \tif(!!String(content).match(/不支持/gi)) {\n      //java.log(cookie.getCookie(url));\n      cookie.replaceCookie(url,java.webView(null,url,\"document.cookie\"));\n    \t}\n    \tif (!!String(content).match(/_cf_chl_opt|challenges.css/gi)) {\n    \t\t i = 1;\n      \twhile (!!String(content).match(/_cf_chl_opt|challenges.css/gi)) {\n\t       java.log('盾');\n\t       java.log(content);\n        if (i <= 1) {\n          java.toast(\"哦呼，五秒盾，正在尝试静默破盾ing……\");\n          content = java.webView(null,url,null);\n        } else {\n          java.toast(\"啊哦，静默破盾好像不管用，试试手动过校验吧！\");\n          content = java.startBrowserAwait(url,\"加载完毕后点完成，此页面可能会弹出多次\").body();\n        }\n        i++;\n      }\n      continue;\n    }\n  \t\t java.log(\"请求失败：\"+url)\n  \t\t java.log(\"重试\"+time+\"次\")\n  \t\t let t=new Date().getTime()\n    while (new Date().getTime() - t < 500) { }\n    if (String(content).match(/1015|503|php/gi)) {\n    \t  while (new Date().getTime() - t < 5000) { }\n    \t}\n  \t\t content = java.ajax(url);\n  \t\t time++;\n  \t}\n  \treturn String(content);\n}",
    "lastUpdateTime": 1717578188165,
    "loginUi": "[\n  {\n    \"name\": \"账号\",\n    \"type\": \"text\"\n  },\n  {\n    \"name\": \"密码\",\n    \"type\": \"password\"\n  }\n]",
    "loginUrl": "@js:\nfunction login() {\n  let une = source.getLoginInfoMap().get(\"账号\")\n  let pwd = source.getLoginInfoMap().get(\"密码\")\n  if (une && pwd) {\n    let body = String('username=' + une + '&password=' + pwd + '&usecookie=86400&act=login')\n    let url = source.bookSourceUrl + '/login.php?do=submit'\n    let res = java.post(url, body, {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    })\n    let ck = res.cookies()\n    if (res.body().match(/错误/gi)) {\n      throw(res.body().match(/<div class=\"aui-ver-form\">[\\s\\S]+<br>/gi)[0].replace(/<.+>\\s*/gi,\"\"))\n    }\n    let header = JSON.stringify({\n      \"Cookie\": String(ck).match(/\\{(.*?)\\}/)[1].replace(/,/g, ';')\n    })\n    source.putLoginHeader(header)\n  }\n}",
    "respondTime": 180000,
    "ruleBookInfo": {
      "author": "[property=\"og:novel:author\"]@content",
      "canReName": "1",
      "coverUrl": "[property=\"og:image\"]@content",
      "intro": "标签：{{@@class.tag-small red@text##\\s## - }}\n{{@@id.bookSummary@tag.content@textNodes}}",
      "kind": "class.book-cell@tag.p.1@ownText&&class.tag-small red@text\n##.*万字|·.*",
      "lastChapter": "class.gray ell@text##(\\d+-\\d+-\\d+\\s\\d+:\\d+)·(.*)##$2 • $1",
      "name": "[property=\"og:novel:book_name\"]@content",
      "tocUrl": "class.btn-normal red@href",
      "wordCount": "class.book-cell@tag.p.1@ownText##连载|完结"
    },
    "ruleContent": {
      "content": "id.acontent@html",
      "imageDecode": "",
      "imageStyle": "FULL",
      "nextContentUrl": "id.footlink@tag.a.-1@href\n@js:\n//121_2.html这样的是下一页，纯数字则是下一章\n//带有catalog是详情页\njava.log(\"url: \"+result)\nif (result==\"\") java.log(src)\nvar isNew=/(\\/(\\d+).html)|catalog/.test(result);\nvar out=isNew?'':result;\nout",
      "payAction": "",
      "replaceRegex": "##((?<=[\\u4e00-\\u9fa5“‘「（，])\\s+)?<!--\\s*\\（继续下一页\\）\\s*-->\\s*|((?<=[\\u4e00-\\u9fa5“‘「（，])\\s+)?\\（本章未完\\）\\s*|.+tmygod.+\\n",
      "title": "id.atitle@text"
    },
    "ruleExplore": {
      "author": "class.book-author@ownText",
      "bookList": "@js:\ni = 1;\n\nif (String(src).match(errorReg())) {\n  src=ajax(baseUrl);\n}\njava.setContent(src)\nresult = java.getElement(\"class.book-ol@tag.li\");\nresult;",
      "bookUrl": "a@href\n@js:\nresult.replace(/&cid=\\d+/gi, \"\")",
      "coverUrl": "img@data-src",
      "intro": "class.book-desc@text&&class.ell@text",
      "kind": "class.tag-small-group origin-right@tag.em.0@text&&\nclass.tag-small-group origin-right@tag.em.1@text&&\ntag.time@text\n@js:\nres=[]\nresult.forEach(item=>{\n    item.split(new RegExp(\"[ \\/]\",\"gi\")).forEach(i=>res.push(i))\n})\nres",
      "name": "class.book-li@tag.img@alt",
      "wordCount": "class.tag-small blue@text"
    },
    "ruleSearch": {
      "author": "class.book-author@textNodes",
      "bookList": "@js:\nif (String(result).match(errorReg())&&!result.includes(\"somework\")) {\n  result=ajax(baseUrl);\n}\nif (result.includes(\"no-js\")) {\n  java.log(result)\n  jsContent = java.cacheFile(java.getString(\"tag.script@src\").match(/http.+somework.+\\?v.+/gi)[0])\n  window = {\n    a: result.match(/window.a=\\'.+\\'/gi)[0].replace(/window.a=|\\'/gi, ''),\n    b: result.match(/window.b=\\'.+\\'/gi)[0].replace(/window.b=|\\'/gi, ''),\n    c: result.match(/window.c=\\'.+\\'/gi)[0].replace(/window.c=|\\'/gi, ''),\n    crypto: {\n      subtle: {\n        importKey(format, keyData, algorithm, extractable, keyUsages) {\n          return {\n            then(func) { func(keyData) }\n          }\n        },\n        decrypt(algorithm, key, data) {\n          cipher = java.createSymmetricCrypto(\"AES/CTR/NoPadding\", key, algorithm.counter)\n          return {\n            then: (func) => { func(cipher.decryptStr(data)) }\n          }\n        }\n      }\n    }\n  }\n  setTimeout = () => { }\n  function TextDecoder() { }\n  TextDecoder.prototype.decode = bytes => bytes\n  document = { cookie: \"\" }\n  java.log(jsContent)\n  funcName=String(jsContent).match(/^function.+\\(/gi)[0].replace(/function| |\\(/gi,'')\n  \tjava.log(funcName)\n  eval(funcName + ' = str => java.base64DecodeToByteArray(str)')\n  eval(String(jsContent)\n    .replace(/^function.+\\(/gi, 'function ('))\n  java.log(document.cookie)\n  cookie.replaceCookie(baseUrl, document.cookie)\n  do {\n    t = new Date().getTime()\n    while (new Date().getTime() - t < 5000) { }\n    java.setContent(result = ajax(baseUrl + \",\"\n      + JSON.stringify({\n        headers: {\n          Cookie: cookie.getCookie(baseUrl)\n        }\n      })))\n    java.log(result)\n  } while (result.includes(\"no-js\"))\n}\njava.getElement(\"class.book-ol book-ol-normal@tag.li\")",
      "bookUrl": "tag.a.0@href",
      "checkKeyWord": "我的青春恋爱喜剧",
      "coverUrl": "img@data-src",
      "intro": "class.book-desc@text",
      "kind": "class.tag-small-group origin-right@tag.em@text\n@js:\nres=[]\nresult.forEach(item=>{\n    item.split(new RegExp(\"[ \\/]\",\"gi\")).forEach(i=>res.push(i))\n})\nres",
      "name": "class.book-title-x@class.book-title@text"
    },
    "ruleToc": {
      "chapterList": "id.catelogX@class.chapter-li\n@js:\n    //现实debug(尝试修复正文链接问题，和目录不全)\n    //《好友角色的我怎么可能大受欢迎》第三卷12\n    //《我的青春恋爱喜剧》\n    //2022-8-19\n    //原来的代码在源注释（已移除）\n    //2022-8-20修复https://w.linovelib.com/novel/2765.html目录加载失败\n    //2023-9-30使用易于理解的变量命名\n    //2023-10-7处理cid(1)以及连续多个cid(0)\n    //2023-11-11解决了一个原来手滑写出的bug\n    //2023-11-16处理连续多个卷名\n    //2023-12-12适配新版卷名\n    //2024-2-6处理《谁说从妥协开始的恋爱一定没结果》\n\nres = result\n//java.log(res)\n\nfor (i = 0; i < res.length; i++) {\n    java.setContent(res[i])\n    if (java.getString(\"tag.a@href\").match(/javascript:cid\\(.+\\)/gi)) {\n        if (String(res[(i == res.length - 1?i:i+1)]).match(/javascript:cid\\(.+\\)/gi)) {\n            java.setContent(res[i - 1])\n            prevLink = java.getString(\"tag.a@href\")\n            if (prevLink == \"\") {\n                java.setContent(res[i - 2])\n                prevLink = java.getString(\"tag.a@href\")\n            }\n            content = ajax(source.bookSourceUrl + prevLink)\n            java.setContent(content)\n            foot = java.getElements(\"id.footlink\")\n            path = prevLink\n\n            //java.log(foot)\n            while (String(foot).match(/下一页|下一頁/gi)) {\n            \t    //java.log(foot)\n                str = content.match(/<script type\\=\\\"text\\/javascript\\\">var ReadParams.*/)\n                path = String(str).match(/url_next\\:'.*?html/)[0].replace(\"url_next:'\", \"\")\n                content = java.ajax(\"https://w.linovelib.com\" + path)\n                java.setContent(content)\n                foot = java.getElements(\"id.footlink\")\n            }\n\n            next = ajax(source.bookSourceUrl + path)\n            str = next.match(/<script type\\=\\\"text\\/javascript\\\">var ReadParams.*/)\n            path = String(str).match(/url_next\\:'.*?html/)[0].replace(\"url_next:'\", \"\")\n            java.log('l:'+path)\n            res[i] = String(res[i]).replace(/javascript:cid\\(.+\\)/gi, path)\n        } else {\n            nextLink = \"\"\n            for (var j=1;nextLink==\"\";j++) {\n                java.setContent(res[i + j])\n                nextLink = java.getString(\"tag.a@href\")\n            }\n            next = ajax(source.bookSourceUrl + nextLink)\n            str = next.match(/<script type\\=\\\"text\\/javascript\\\">var ReadParams.*/)\n            try {\n              path = String(str).match(/url_previous\\:'.*?html/)[0].replace(\"url_previous:'\", \"\")\n            } catch(e) {\n            \t  java.toast(String(next)+\"\\n\")\n            \t  java.log(next)\n            \t  throw(\"目录解析报错开始：\\n\"+String(next)+\"\\n结束\")\n            \t}\n            //java.log(path)\n\n            res[i] = String(res[i]).replace(/javascript:cid\\(.+\\)/gi, path)\n        }\n    }\n\n    //java.log(res[i])\n}\nres",
      "chapterName": "text",
      "chapterUrl": "@js:\n//只有不为卷名时返回URL，避免阅读自动合并\njava.getString(\"class.chapter-bar@text\")!=java.getString(\"text\") ? java.getString(\"tag.a@href\") : \"\"",
      "isVolume": "@js:\njava.getString(\"class.chapter-bar@text\")==java.getString(\"text\")",
      "updateTime": ""
    },
    "searchUrl": "<js>\npage == 1 ?\n  \"/search.html?searchkey={{key}}&searchtype=all\"\n  :\n  '/search/{{key}}/{{page}}.html'\n</js>",
    "weight": 0
  },
  {
    "bookSourceComment": "建议登录\n\n酷安 @吉王义昊\nGitHub：https://github.com/jiwangyihao/source-j-legado\n\n# 关于许可的额外声明（在线版本参见 GitHub，以在线版本为准）\n\n- 当许可证与本声明冲突时，以本声明为准；\n- 对于本仓库中的任意代码片段：按照 `MPL 2.0` 中有关约定执行；\n- 对于本仓库中的某一完整书源的转载或二次开发，需满足以下全部条件：\n  - 在[本仓库](https://github.com/jiwangyihao/source-j-legado)的 `issue` 中提出请求并具体说明转载地址、二次开发后的书源开源地址以及其他必要信息；\n  - 等待原作者（即本仓库的初始所有者和初始代码贡献者 [@jiwangyihao](https://github.com/jiwangyihao)）查看并通过 `issue` 或依据原作者要求更改转载方式或补充更详细的信息。\n  - 考虑到本项目弃坑的可能，新 `issue` 开启后超过 20 个工作日原作者没有回复或者原作者回复要求更改的 `issue` 在更改后超过 20 个工作日原作者没有回复即视为原作者通过该 `issue`：\n    - 此处的 `issue` 仅包括在[本仓库](https://github.com/jiwangyihao/source-j-legado)开启的，处于「开启状态」的 issue。（也就是说，请不要在已经关闭的 issue 中回复）。\n    - 对于此种方式通过的 issue，转载/二次开发者仍应当遵守本声明中已经写明的相关约定。\n  - 不得上传至源仓库或整理至`非轻小说专用`的书源合集中并应当避免其他人将转载/二次开发版本上传至源仓库或整理至`非轻小说专用`的书源合集中：\n    - 关于轻小说的定义的额外说明：不包括国内的原创网络文学作品（如 `SF 轻小说` 中的原创轻小说以及`起点中文网`中标签包含轻小说的作品）。\n    - 轻小说专用的定义：有且仅有想看轻小说的人可能会添加。\n  - 必须在转载/二次开发地址的明显位置完整包含本声明的全部内容。\n  - 必须保留源注释中原有的更改记录。",
    "bookSourceGroup": "轻小说,哔轻类似物",
    "bookSourceName": "三七轻小说",
    "bookSourceType": 0,
    "bookSourceUrl": "https://m.37yq.com",
    "bookUrlPattern": "",
    "concurrentRate": "",
    "coverDecodeJs": "",
    "customOrder": -41322,
    "enabled": true,
    "enabledCookieJar": true,
    "enabledExplore": true,
    "exploreUrl": "@js:\nres = []\n\n//筛选链接生成\nfunction generateFilterUrl(new_values) {\n  values = {\n    order: 'lastupdate',\n    anime: '0',\n    sortid: '0',\n    typeid: '0',\n    words: '0',\n    rgroupid: '0',\n    update: '0',\n    isfull: '0',\n    page: '{{page}}',\n  }\n  for (key in new_values) {\n  \t  values[key]=new_values[key]\n  \t}\n  return source.bookSourceUrl + '/wenku/' + values.order + '_' + values.anime + '_' + values.sortid + '_' + values.typeid + '_' + values.words + '_' + values.rgroupid + '_' + values.update + '_' + values.isfull + '_' + values.page + '.html';\n}\n\n//书架\nuser = ajax(source.bookSourceUrl + \"/user.php\")\n//java.toast(user)\ntry {\nif (user.match(/<h2 class=\"aui-center-title\">(登录|错误).*三七轻小说<\\/h2>/gi)) {\n  //未登录\n  res.push(\n    {\n      title: `>> 我的书架 | 未登录 <<`,\n      url: '',\n      style: { layout_flexGrow: 1, layout_flexBasisPercent: 1 }\n    })\n} else {\n  //已登录\n  res.push(\n    {\n      title: `>> 我的书架 | ${user.match(/<span class=\"user-name\">.+<\\/span>/gi)[0].replace(/<\\/?span.*?>/gi,'')} <<`,\n      url: '',\n      style: { layout_flexGrow: 1, layout_flexBasisPercent: 1 }\n    })\n  bookcase = ajax(source.bookSourceUrl + \"/bookcase.php\")\n  bookcase.match(/<select[\\s\\S]+?<\\/select>/gi)[0].match(/<option.+<\\/option>/gi).forEach(option => {\n    res.push(\n      {\n        title: option.match(/>.+(?=<)/gi)[0].replace('>', ''),\n        url: source.bookSourceUrl + \"/bookcase.php?classid=\" + option.match(/value=\\\".+?(?=\\\")/gi)[0].replace(/(value=\\\")/gi, ''),\n        style: { layout_flexGrow: 1 }\n      })\n  })\n}\n} catch (e) {\n  throw(\"书架加载失败：\\n\"+e+\"\\n登录页源码：\\n\"+user)\n}\n\ncontent = ajax(source.bookSourceUrl + \"/wenku/\")\ncontent.match(/排序[\\s\\S]+?<\\/div>/gi)[0].match(/<a.+<\\/a>/gi).forEach(a => {\n  let filter = {}\n  let sortTitle = a.match(/>.+(?=<)/gi)[0].replace('>', '')\n  let type = \"order\"\n  let value = a.match(/\\/[^_/]+(?=_)/gi)[0].replace('/', '')\n  filter[type]=value;\n  content.match(/作品分类[\\s\\S]+?<\\/div>/gi)[0].match(/<a.+<\\/a>/gi).forEach((v, i) => {\n    let v_type = \"anime\"\n    let v_value = v.match(/\\/[^_/]+_\\d+(?=_)/gi)[0].replace(/\\/[^_/]+_/gi, '')\n    filter[v_type]=v_value;\n    if (i == 0) {\n      res.push(\n        {\n          title: `>> 作品分类 | ${sortTitle} <<`,\n          url: generateFilterUrl(filter),\n          style: { layout_flexGrow: 1, layout_flexBasisPercent: 1 }\n        })\n    } else {\n      res.push(\n        {\n          title: v.match(/>.+(?=<)/gi)[0].replace('>', ''),\n          url: generateFilterUrl(filter),\n          style: { layout_flexGrow: 1 }\n        })\n    }\n  })\n})\n\ncontent.match(/排序[\\s\\S]+?重置/gi)[0].match(/<li[\\s\\S]+?<\\/li>/gi).forEach(li => {\n  let sortTitle = li.match(/>.+(?=<\\/h3>)/gi)[0].replace('>', '')\n  res.push(\n    {\n      title: `>> ${sortTitle} <<`,\n      url: '',\n      style: { layout_flexGrow: 1, layout_flexBasisPercent: 1 }\n    })\n  li.match(/<a.+<\\/a>/gi).forEach((v, i) => {\n    if (i != 0) {\n      res.push(\n        {\n          title: v.match(/>.+(?=<)/gi)[0].replace('>', ''),\n          url: v.match(/href=\"[^\"]+(?=\")/gi)[0].replace('href=\"',\"\").replace(\"1.html\",\"{{page}}.html\"),\n          style: { layout_flexGrow: 1 }\n        })\n    }\n  })\n})\ntagContent = ajax(source.bookSourceUrl + \"/taglist/1.html\")\nres.push(\n  {\n    title: '>> 标签分类 <<',\n    url: '',\n    style: { layout_flexGrow: 1, layout_flexBasisPercent: 1 }\n  })\ntry {\ntagContent.match(/标签分类<\\/h3>[\\s\\S]+?重置/gi)[0].match(/<a.+<\\/a>/gi).forEach((v, i) => {\n  res.push(\n    {\n      title: v.match(/>.+(?=<)/gi)[0].replace('>', ''),\n      url: v.match(/href=\"[^\"]+(?=\")/gi)[0].replace('href=\"',\"\").replace(\"1.html\",\"{{page}}.html\"),\n      style: { layout_flexGrow: 1 }\n    })\n})\n} catch (e) {\n  throw(\"标签页解析错误：\"+e+\"\\n标签页源码：\\n\"+tagContent)\n}\nJSON.stringify(res)\n//throw(JSON.stringify(res))",
    "header": "{\n\"Referer\": \"https://m.37yq.com\",\n\"User-Agent\":\"\",\n}",
    "jsLib": "function errorReg() {\n  return /(java.net.+Exception)|(okhttp.+Exception)|(error code: 1015)|(503 Service Temporarily Unavailable)|(Parse error.+in.+wwwroot.+php)|(_cf_chl_opt|challenges.css)|(<center.+>.+不支持)|(章节内容不支持该浏览器显示)/gi\n}\nfunction ajax(url) {\n  const { java, cookie } = this;\n  let content = \"\";\n  let time=1;\n  \tcontent = java.ajax(url);\n  \twhile (String(content).match(errorReg())) {\n    if (time>10) {\n  \t    java.toast(\"重试10次后仍请求失败：\"+url)\n  \t    throw(\"重试10次后仍请求失败：\"+url+content)\n  \t    break;\n    \t}\n    \tif(!!String(content).match(/不支持/gi)) {\n      //java.log(cookie.getCookie(url));\n      cookie.replaceCookie(url,java.webView(null,url,\"document.cookie\"));\n    \t}\n    \tif (!!String(content).match(/_cf_chl_opt|challenges.css/gi)) {\n    \t\t i = 1;\n      \twhile (!!String(content).match(/_cf_chl_opt|challenges.css/gi)) {\n\t       java.log('盾');\n\t       java.log(content);\n        if (i <= 1) {\n          java.toast(\"哦呼，五秒盾，正在尝试静默破盾ing……\");\n          content = java.webView(null,url,null);\n        } else {\n          java.toast(\"啊哦，静默破盾好像不管用，试试手动过校验吧！\");\n          content = java.startBrowserAwait(url,\"加载完毕后点完成，此页面可能会弹出多次\").body();\n        }\n        i++;\n      }\n      continue;\n    }\n  \t\t java.log(\"请求失败：\"+url)\n  \t\t java.log(\"重试\"+time+\"次\")\n  \t\t let t=new Date().getTime()\n    while (new Date().getTime() - t < 500) { }\n    if (String(content).match(/1015|503|php/gi)) {\n    \t  while (new Date().getTime() - t < 5000) { }\n    \t}\n  \t\t content = java.ajax(url);\n  \t\t time++;\n  \t}\n  \treturn String(content);\n}",
    "lastUpdateTime": 1716525120257,
    "loginUi": "[\n  {\n    \"name\": \"账号\",\n    \"type\": \"text\"\n  },\n  {\n    \"name\": \"密码\",\n    \"type\": \"password\"\n  }\n]",
    "loginUrl": "@js:\nfunction login() {\n  let une = source.getLoginInfoMap().get(\"账号\")\n  let pwd = source.getLoginInfoMap().get(\"密码\")\n  if (une && pwd) {\n    let body = String('username=' + une + '&password=' + pwd + '&usecookie=86400&act=login')\n    let url = source.bookSourceUrl + '/login.php?do=submit'\n    let res = java.post(url, body, {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    })\n    let ck = res.cookies()\n    if (res.body().match(/错误/gi)) {\n      throw(res.body().match(/<div class=\"aui-ver-form\">[\\s\\S]+<br>/gi)[0].replace(/<.+>\\s*/gi,\"\"))\n    }\n    let header = JSON.stringify({\n      \"Cookie\": String(ck).match(/\\{(.*?)\\}/)[1].replace(/,/g, ';')\n    })\n    source.putLoginHeader(header)\n  }\n}",
    "respondTime": 180000,
    "ruleBookInfo": {
      "author": "[property=\"og:novel:author\"]@content",
      "canReName": "1",
      "coverUrl": "[property=\"og:image\"]@content",
      "intro": "标签：{{@@class.tag-small red@text##\\s## - }}\n{{@@id.bookSummary@tag.content@textNodes}}",
      "kind": "class.book-cell@tag.p.1@ownText&&class.tag-small red@text\n##.*万字|·.*",
      "lastChapter": "class.gray ell@text##(\\d+-\\d+-\\d+\\s\\d+:\\d+)·(.*)##$2 • $1",
      "name": "[property=\"og:novel:book_name\"]@content",
      "tocUrl": "class.btn-normal red@href",
      "wordCount": "class.book-cell@tag.p.1@ownText##连载|完结"
    },
    "ruleContent": {
      "content": "id.acontent@html",
      "imageDecode": "",
      "imageStyle": "FULL",
      "nextContentUrl": "##url_next:'([^']*)'##$1###\n@js:\n//121_2.html这样的是下一页，纯数字则是下一章\n//带有catalog是详情页\njava.log(\"url: \"+result)\nif (result==\"\") java.log(src)\nvar isNew=/(\\/(\\d+).html)|catalog/.test(result);\nvar out=isNew?'':result;\nout",
      "payAction": "",
      "replaceRegex": "##((?<=[\\u4e00-\\u9fa5“‘「（，])\\s+)?<!--\\s*\\（继续下一页\\）\\s*-->\\s*|((?<=[\\u4e00-\\u9fa5“‘「（，])\\s+)?\\（本章未完\\）\\s*|.+tmygod.+\\n",
      "title": "id.atitle@text"
    },
    "ruleExplore": {
      "author": "class.book-author@ownText",
      "bookList": "@js:\ni = 1;\n\nif (String(src).match(errorReg())) {\n  src=ajax(baseUrl);\n}\njava.setContent(src)\nresult = java.getElement(\"class.book-ol@tag.li\");\nresult;",
      "bookUrl": "a@href\n@js:\nresult.replace(/&cid=\\d+/gi, \"\")",
      "coverUrl": "img@data-src",
      "intro": "class.book-desc@text&&class.ell@text",
      "kind": "class.tag-small-group origin-right@tag.em.0@text&&\nclass.tag-small-group origin-right@tag.em.1@text&&\ntag.time@text\n@js:\nres=[]\nresult.forEach(item=>{\n    item.split(new RegExp(\"[ \\/]\",\"gi\")).forEach(i=>res.push(i))\n})\nres",
      "name": "class.book-li@tag.img@alt",
      "wordCount": "class.tag-small blue@text"
    },
    "ruleSearch": {
      "author": "class.book-author@textNodes",
      "bookList": "@js:\nif (String(result).match(errorReg())&&!result.includes(\"somework\")) {\n  result=ajax(baseUrl);\n}\nif (result.includes(\"no-js\")) {\n  java.log(result)\n  jsContent = java.cacheFile(java.getString(\"tag.script@src\").match(/http.+somework.+\\?v.+/gi)[0])\n  window = {\n    a: result.match(/window.a=\\'.+\\'/gi)[0].replace(/window.a=|\\'/gi, ''),\n    b: result.match(/window.b=\\'.+\\'/gi)[0].replace(/window.b=|\\'/gi, ''),\n    c: result.match(/window.c=\\'.+\\'/gi)[0].replace(/window.c=|\\'/gi, ''),\n    crypto: {\n      subtle: {\n        importKey(format, keyData, algorithm, extractable, keyUsages) {\n          return {\n            then(func) { func(keyData) }\n          }\n        },\n        decrypt(algorithm, key, data) {\n          cipher = java.createSymmetricCrypto(\"AES/CTR/NoPadding\", key, algorithm.counter)\n          return {\n            then: (func) => { func(cipher.decryptStr(data)) }\n          }\n        }\n      }\n    }\n  }\n  setTimeout = () => { }\n  function TextDecoder() { }\n  TextDecoder.prototype.decode = bytes => bytes\n  document = { cookie: \"\" }\n  java.log(jsContent)\n  funcName=String(jsContent).match(/^function.+\\(/gi)[0].replace(/function| |\\(/gi,'')\n  \tjava.log(funcName)\n  eval(funcName + ' = str => java.base64DecodeToByteArray(str)')\n  eval(String(jsContent)\n    .replace(/^function.+\\(/gi, 'function ('))\n  java.log(document.cookie)\n  cookie.replaceCookie(baseUrl, document.cookie)\n  do {\n    t = new Date().getTime()\n    while (new Date().getTime() - t < 5000) { }\n    java.setContent(result = ajax(baseUrl + \",\"\n      + JSON.stringify({\n        headers: {\n          Cookie: cookie.getCookie(baseUrl)\n        }\n      })))\n    java.log(result)\n  } while (result.includes(\"no-js\"))\n}\njava.getElement(\"class.book-ol book-ol-normal@tag.li\")",
      "bookUrl": "tag.a.0@href",
      "checkKeyWord": "我的青春恋爱喜剧",
      "coverUrl": "a@href@js:\nvar id = result.match(/\\/(\\d+)\\.html/)[1];\n'https://m.37yq.com/files/article/image/'+parseInt(id/1000)+'/'+id+'/'+id+'s.jpg';",
      "intro": "class.book-desc@text",
      "kind": "class.tag-small-group origin-right@tag.em@text\n@js:\nres=[]\nresult.forEach(item=>{\n    item.split(new RegExp(\"[ \\/]\",\"gi\")).forEach(i=>res.push(i))\n})\nres",
      "name": "class.book-title-x@class.book-title@text"
    },
    "ruleToc": {
      "chapterList": "id.catelogX@class.chapter-li\n@js:\n    //现实debug(尝试修复正文链接问题，和目录不全)\n    //《好友角色的我怎么可能大受欢迎》第三卷12\n    //《我的青春恋爱喜剧》\n    //2022-8-19\n    //原来的代码在源注释（已移除）\n    //2022-8-20修复https://w.linovelib.com/novel/2765.html目录加载失败\n    //2023-9-30使用易于理解的变量命名\n    //2023-10-7处理cid(1)以及连续多个cid(0)\n    //2023-11-11解决了一个原来手滑写出的bug\n    //2023-11-16处理连续多个卷名\n    //2023-12-12适配新版卷名\n    //2024-2-6处理《谁说从妥协开始的恋爱一定没结果》\n\nres = result\n//java.log(res)\n\nfor (i = 0; i < res.length; i++) {\n    java.setContent(res[i])\n    if (java.getString(\"tag.a@href\").match(/javascript:cid\\(.+\\)/gi)) {\n        if (String(res[(i == res.length - 1?i:i+1)]).match(/javascript:cid\\(.+\\)/gi)) {\n            java.setContent(res[i - 1])\n            prevLink = java.getString(\"tag.a@href\")\n            if (prevLink == \"\") {\n                java.setContent(res[i - 2])\n                prevLink = java.getString(\"tag.a@href\")\n            }\n            content = ajax(source.bookSourceUrl + prevLink)\n            java.setContent(content)\n            foot = java.getElements(\"id.footlink\")\n            path = prevLink\n\n            //java.log(foot)\n            while (String(foot).match(/下一页|下一頁/gi)) {\n            \t    //java.log(foot)\n                str = content.match(/<script type\\=\\\"text\\/javascript\\\">var ReadParams.*/)\n                path = String(str).match(/url_next\\:'.*?html/)[0].replace(\"url_next:'\", \"\")\n                content = java.ajax(\"https://w.linovelib.com\" + path)\n                java.setContent(content)\n                foot = java.getElements(\"id.footlink\")\n            }\n\n            next = ajax(source.bookSourceUrl + path)\n            str = next.match(/<script type\\=\\\"text\\/javascript\\\">var ReadParams.*/)\n            path = String(str).match(/url_next\\:'.*?html/)[0].replace(\"url_next:'\", \"\")\n            java.log('l:'+path)\n            res[i] = String(res[i]).replace(/javascript:cid\\(.+\\)/gi, path)\n        } else {\n            nextLink = \"\"\n            for (var j=1;nextLink==\"\";j++) {\n                java.setContent(res[i + j])\n                nextLink = java.getString(\"tag.a@href\")\n            }\n            next = ajax(source.bookSourceUrl + nextLink)\n            str = next.match(/<script type\\=\\\"text\\/javascript\\\">var ReadParams.*/)\n            try {\n              path = String(str).match(/url_previous\\:'.*?html/)[0].replace(\"url_previous:'\", \"\")\n            } catch(e) {\n            \t  java.toast(String(next)+\"\\n\")\n            \t  java.log(next)\n            \t  throw(\"目录解析报错开始：\\n\"+String(next)+\"\\n结束\")\n            \t}\n            //java.log(path)\n\n            res[i] = String(res[i]).replace(/javascript:cid\\(.+\\)/gi, path)\n        }\n    }\n\n    //java.log(res[i])\n}\nres",
      "chapterName": "text",
      "chapterUrl": "@js:\n//只有不为卷名时返回URL，避免阅读自动合并\njava.getString(\"class.chapter-bar@text\")!=java.getString(\"text\") ? java.getString(\"tag.a@href\") : \"\"",
      "isVolume": "@js:\njava.getString(\"class.chapter-bar@text\")==java.getString(\"text\")",
      "updateTime": ""
    },
    "searchUrl": "<js>\npage == 1 ?\n  \"/so.html?searchkey={{key}}&searchtype=all\"\n  :\n  '/so/{{key}}/{{page}}.html'\n</js>",
    "weight": 0
  }
,

  {
    "bookSourceComment": "建议登录\n\n酷安 @吉王义昊\nGitHub：https://github.com/jiwangyihao/source-j-legado\n\n# 关于许可的额外声明（在线版本参见 GitHub，以在线版本为准）\n\n- 当许可证与本声明冲突时，以本声明为准；\n- 对于本仓库中的任意代码片段：按照 `MPL 2.0` 中有关约定执行；\n- 对于本仓库中的某一完整书源的转载或二次开发，需满足以下全部条件：\n  - 在[本仓库](https://github.com/jiwangyihao/source-j-legado)的 `issue` 中提出请求并具体说明转载地址、二次开发后的书源开源地址以及其他必要信息；\n  - 等待原作者（即本仓库的初始所有者和初始代码贡献者 [@jiwangyihao](https://github.com/jiwangyihao)）查看并通过 `issue` 或依据原作者要求更改转载方式或补充更详细的信息。\n  - 考虑到本项目弃坑的可能，新 `issue` 开启后超过 20 个工作日原作者没有回复或者原作者回复要求更改的 `issue` 在更改后超过 20 个工作日原作者没有回复即视为原作者通过该 `issue`：\n    - 此处的 `issue` 仅包括在[本仓库](https://github.com/jiwangyihao/source-j-legado)开启的，处于「开启状态」的 issue。（也就是说，请不要在已经关闭的 issue 中回复）。\n    - 对于此种方式通过的 issue，转载/二次开发者仍应当遵守本声明中已经写明的相关约定。\n  - 不得上传至源仓库或整理至`非轻小说专用`的书源合集中并应当避免其他人将转载/二次开发版本上传至源仓库或整理至`非轻小说专用`的书源合集中：\n    - 关于轻小说的定义的额外说明：不包括国内的原创网络文学作品（如 `SF 轻小说` 中的原创轻小说以及`起点中文网`中标签包含轻小说的作品）。\n    - 轻小说专用的定义：有且仅有想看轻小说的人可能会添加。\n  - 必须在转载/二次开发地址的明显位置完整包含本声明的全部内容。\n  - 必须保留源注释中原有的更改记录。\n\n整理修改缝合：酷安 Wolken\n灰色章节修复目录部分By叶落岚起+关耳/乃星改\n2021.8.3\n补丁 : 神秘人\n修复搜索问题\n修复发现榜单没图的问题\n修复章节内图片问题\n新補丁: 神秘人\n抓取源码中的关键字替换\n更新补丁\n更新补丁17/9\n2023.9.27\n新补丁：酷安 @吉王义昊\n重新抓取源码中的关键字替换\n2023.9.27\n新补丁2nd：酷安 @吉王义昊\n修复插图不能正常加载的问题\n2023.9.30\n酷安 @吉王义昊\n添加登录URL\n清理了无用代码\n使用更易读的变量名\n2023.10.1\n酷安 @吉王义昊\n重新抓取源码中的关键字替换\n2023.10.1\n酷安 @吉王义昊\n在获取正文时自动拉取源码并解密进行关键字替换，一劳永逸（大概）解决问题\n注意：此版本会使网络请求次数增加一倍，并一定程度上减慢加载速度\n2023.10.1\n酷安 @吉王义昊\n增加登录URL和登录UI\n启用CookieJar\n去除章节名下方的URL\n修正了下一页获取导致的正文加载错误\n补全发现中的文库\n修正部分小说目录获取错误的问题\n2023.10.4\n酷安 @吉王义昊\n跟进源码新的加密方式\n2023.10.5\n酷安 @吉王义昊\n跟进源码新的加密方式\n2023.10.6\n酷安 @吉王义昊\n跟进源站网站结构改动\n2023.10.7\n酷安 @吉王义昊\n改进了目录获取方式，现在能够处理更多意外情况\n2023.10.7\n酷安 @吉王义昊 @是樱椛不是樱花\n发现新增标签\n2023.10.9\n酷安 @吉王义昊\n改进了发现\n2023.10.13\n酷安 @吉王义昊\n跟进源站结构改动\n2023.10.15\n酷安 @吉王义昊\n修正部分小说目录获取错误的问题\n2023.10.22\n酷安 @吉王义昊\n发现页更改为动态获取，为大家带来更多排列组合（乐\n同样由于动态获取，现在可以查看标签对应的书籍数量了\n小幅优化正文的获取速度\n正文页可显示正确的章节名称（在加载对应正文页后目录里的错误名称会自动更正）\n2023.10.23\n酷安 @吉王义昊\n加载详情页后会自动更改错误的书名\n2023.10.25\n酷安 @吉王义昊\n发现页新增书架\n2023.11.7\n酷安 @吉王义昊\n使用Cache小幅度加快连续加载时正文的加载速度\n2023.11.11\n酷安 @吉王义昊\n解决了部分书籍目录最后一章获取链接错误的问题\n2023.11.12\n酷安 @吉王义昊\n移除了站长的喊话\n2023.11.14\n酷安 @吉王义昊\n修复了图片加载错误的问题\n2023.11.16\n酷安 @吉王义昊\n解决了部分书籍获取目录失败的问题\n2023.11.23\n酷安 @吉王义昊\n解决了未登录时无法正确加载发现页的问题\n2023.11.28\n酷安 @吉王义昊\nwrap了一份WebCrypto API，现在搜索不用等待内置浏览器跳转了\n2023.12.12\n酷安 @吉王义昊\n适配新版卷名\n2023.12.13\n酷安 @吉王义昊\n适配新版卷名\n2024.1.13\n酷安 @吉王义昊\n自动调用内置浏览器过cf盾\n移除了并发率\n将UA置空强制阅读使用WebView默认UA\n目录下一页识别改为简繁通用\n2024.1.20\n酷安 @吉王义昊\n实验性加入自动重试机制，大幅提高目录及多页正文加载成功率\n2024.1.24\n酷安 @吉王义昊\n适配最新正文检测\n2024.2.6\n酷安 @吉王义昊\n处理cf扩大化问题\n解决部分小说目录加载失败的问题（《谁说从妥协开始的恋爱一定没结果》）\n2024.2.14\n酷安 @吉王义昊\n正文重试优化\n2024.3.11\n酷安 @吉王义昊\n适配最新正文检测\n处理登录失败问题\n2024.3.25\n酷安 @吉王义昊\n适配最新文库筛选\n2024.4.8\n酷安 @吉王义昊\n回退更改以解决乱码问题\n适配最新标签筛选\n调整发现样式\n2024.4.12\n酷安 @吉王义昊\n在简介中增加标签信息\n2024.5.2\n酷安 @吉王义昊\n解决换字体导致的乱码问题\n2024.6.11\n酷安 @吉王义昊\n处理源站最新更改\n2024.7.6\n酷安 @吉王义昊\n跟进源站发现更改\n2024.9.17\n酷安 @吉王义昊\n适配源站正文更改\n2025.1.10\n酷安 @吉王义昊\n处理「客户端已停用」问题\n跟进最新正文字体加密\n过滤采集Note\n2025.2.23\n酷安 @吉王义昊\n修复登录问题\n修复正文加载\n移除意外出现的注释",
    "bookSourceGroup": "轻小说",
    "bookSourceName": "哔哩轻小说🏷",
    "bookSourceType": 0,
    "bookSourceUrl": "https://www.bilinovel.com",
    "bookUrlPattern": "",
    "concurrentRate": "1000",
    "coverDecodeJs": "",
    "customOrder": 150,
    "enabled": true,
    "enabledCookieJar": true,
    "enabledExplore": true,
    "exploreUrl": "@js:\nres = []\n\n//筛选链接生成\nfunction generateFilterUrl(new_values) {\n  values = {\n    order: 'lastupdate',\n    anime: '0',\n    tagid: '0',\n    sortid: '0',\n    typeid: '0',\n    words: '0',\n    rgroupid: '0',\n    update: '0',\n    isfull: '0',\n    page: '{{page}}',\n    initial: '0'\n  }\n  for (key in new_values) {\n  \t  values[key]=new_values[key]\n  \t}\n  return source.bookSourceUrl + '/wenku/' + values.order + '_' + values.tagid + '_' + values.isfull + '_' + values.anime + '_' + values.rgroupid + '_' + values.sortid + '_' + values.typeid + '_' + values.words + '_' + values.page + '_' + values.update + '.html';\n}\n\n//书架\nuser = ajax(source.bookSourceUrl + \"/user.php\")\n//java.toast(user)\ntry {\nif (user.match(/<title>(登录|错误).+哔哩轻小说<\\/title>/gi)) {\n  //未登录\n  res.push(\n    {\n      title: `>> 我的书架 | 未登录 <<`,\n      url: '',\n      style: { layout_flexGrow: 1, layout_flexBasisPercent: 1 }\n    })\n} else {\n  //已登录\n  res.push(\n    {\n      title: `>> 我的书架 | ${user.match(/<span class=\"user-name\">.+<\\/span>/gi)[0].replace(/<\\/?span.*?>/gi,'')} <<`,\n      url: '',\n      style: { layout_flexGrow: 1, layout_flexBasisPercent: 1 }\n    })\n  bookcase = ajax(source.bookSourceUrl + \"/bookcase.php\")\n  bookcase.match(/<select[\\s\\S]+?<\\/select>/gi)[0].match(/<option.+<\\/option>/gi).forEach(option => {\n    res.push(\n      {\n        title: option.match(/>.+(?=<)/gi)[0].replace('>', ''),\n        url: source.bookSourceUrl + \"/bookcase.php?classid=\" + option.match(/value=\\\".+?(?=\\\")/gi)[0].replace(/(value=\\\")/gi, ''),\n        style: { layout_flexGrow: 1 }\n      })\n  })\n}\n} catch (e) {\n  throw(\"书架加载失败：\\n\"+e+\"\\n登录页源码：\\n\"+user)\n}\n\ncontent = org.jsoup.Jsoup.parse(ajax(source.bookSourceUrl + \"/wenku/\"))\ntry {\ncontent.select(\"ul#filters li.sort-li\").forEach(li => {\n  res.push({\n    title: `>> ${li.select(\"h3\").textNodes()[0].text()} <<`,\n    url: \"\",\n    style: {\n      layout_flexGrow: 1,\n      layout_flexBasisPercent: 1\n    }\n  })\n  li.select(\"a\").forEach(a => {\n    let filter = {}\n    let type = a.attr(\"data-filter-type\")\n    let value = a.attr(\"data-filter-value\")\n    filter[type]=value\n    res.push({\n      title: a.text(),\n      url: generateFilterUrl(filter),\n      style: { layout_flexGrow: 1 }\n    })\n  })\n})\n} catch (e) {\n  throw(\"文库加载失败：\\n\"+e+\"\\n文库页源码：\\n\"+content)\n}\n\nJSON.stringify(res)\n//throw(JSON.stringify(res)) ",
    "header": "{\n\"Referer\": \"https://www.bilinovel.com\",\n\"User-Agent\":\"Mozilla/5.0 (Linux; Android 14; 23113RKC6C Build/UKQ1.230804.001) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.6533.64 Mobile Safari/537.36\",\n\"Accept-Language\":\"zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6\",\n\"Accept\":\"*/*\"\n}",
    "jsLib": "function errorReg() {\n  return /(java.net.+Exception)|(okhttp.+Exception)|(error code: 1015)|(cf-error[\\s\\S]*1015)|(503 Service Temporarily Unavailable)|(403 Forbidden)|(Parse error.+in.+wwwroot.+php)|(_cf_chl_opt|challenges.css)|(<center.+>.+不支持)|(章节内容不支持该浏览器显示)|(内容加载失败！)/gi\n}\nfunction ajax(url) {\n  const { java, cookie } = this;\n  let content = \"\";\n  let time=1;\n  \tcontent = java.ajax(url);\n  \twhile (String(content).match(errorReg())) {\n    if (time>10) {\n  \t    java.toast(\"重试10次后仍请求失败：\"+url)\n  \t    throw(\"重试10次后仍请求失败：\"+url+content)\n  \t    break;\n    \t}\n    \tif (!!String(content).match(/403|1015/gi)) {\n    \t  const nowTime = new Date().getTime()\n    \t  const waitTime = (Math.random() + 1) * time * 10\n    \t  java.toast(`访问频率过高，等待 ${waitTime} 秒`)\n    \t  while (new Date().getTime() < nowTime + waitTime * 1000) {}\n    \t}\n    \tif (!!String(content).match(/不支持/gi)) {\n      //java.log(cookie.getCookie(url));\n      cookie.replaceCookie(url,java.webView(null,url,\"document.cookie\"));\n    \t}\n    \tif (!!String(content).match(/_cf_chl_opt|challenges.css|403/gi)) {\n    \t\t i = 1;\n      \twhile (!!String(content).match(/_cf_chl_opt|challenges.css|403/gi)) {\n\t       java.log('盾');\n\t       java.log(content);\n        if (i <= 1) {\n          java.toast(\"哦呼，五秒盾，正在尝试静默破盾ing……\");\n          content = java.webView(null,url,null);\n        } else {\n          java.toast(\"啊哦，静默破盾好像不管用，试试手动过校验吧！\");\n          content = java.startBrowserAwait(url,\"加载完毕后点完成，此页面可能会弹出多次\").body();\n        }\n        i++;\n      }\n      continue;\n    }\n  \t\t java.log(\"请求失败：\"+url)\n  \t\t java.log(\"重试\"+time+\"次\")\n  \t\t let t=new Date().getTime()\n    while (new Date().getTime() - t < 500) { }\n    if (String(content).match(/1015|503|php/gi)) {\n    \t  while (new Date().getTime() - t < 5000) { }\n    \t}\n  \t\t content = java.ajax(url);\n  \t\t time++;\n  \t}\n  \treturn String(content);\n}",
    "lastUpdateTime": 1741632924971,
    "loginUi": "[\n  {\n    \"name\": \"账号\",\n    \"type\": \"text\"\n  },\n  {\n    \"name\": \"密码\",\n    \"type\": \"password\"\n  }\n]",
    "loginUrl": "@js:\nfunction login() {\n  let une = source.getLoginInfoMap().get(\"账号\")\n  let pwd = source.getLoginInfoMap().get(\"密码\")\n  if (une && pwd) {\n    let body = String('username=' + une + '&password=' + pwd + '&usecookie=86400&act=login')\n    let url = source.bookSourceUrl + '/login.php?do=submit'\n    let res = java.post(url, body, {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"Cookie\": \"night=0\",\n      \"User-Agent\": \"Mozilla/5.0 (Linux; Android 14; 23113RKC6C Build/UKQ1.230804.001) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.6533.64 Mobile Safari/537.36\"\n    })\n    let ck = res.cookies()\n    if (res.body().match(/错误/gi)) {\n      throw(res.body().match(/<div class=\"aui-ver-form\">[\\s\\S]+<br>/gi)[0].replace(/<.+>\\s*/gi,\"\"))\n    }\n    let header = JSON.stringify({\n      \"Cookie\": String(ck).match(/\\{(.*?)\\}/)[1].replace(/,/g, ';')\n    })\n    source.putLoginHeader(header)\n  }\n}",
    "respondTime": 180000,
    "ruleBookInfo": {
      "author": "[property=\"og:novel:author\"]@content",
      "canReName": "1",
      "coverUrl": "[property=\"og:image\"]@content",
      "intro": "标签：{{@@class.tag-small red@text##\\s## - }}\n{{@@id.bookSummary@tag.content@textNodes}}",
      "kind": "class.book-cell@tag.p.1@ownText&&class.tag-small red@text\n##.*万字|·.*",
      "lastChapter": "class.gray ell@text##(\\d+-\\d+-\\d+\\s\\d+:\\d+)·(.*)##$2 • $1",
      "name": "[property=\"og:novel:book_name\"]@content",
      "tocUrl": "{{@@class.btn-normal red@href}}",
      "wordCount": "class.book-cell@tag.p.1@ownText##连载|完结"
    },
    "ruleContent": {
      "content": "@js:\nif (String(src).match(errorReg())) {\n  java.log(src)\n  src=ajax(baseUrl);\n}\nsrc=src.replace(/<\\w\\d{4}>([^<]+(<br\\s*\\/?>)?)+<\\/\\w\\d{4}>/gi, \"\").replace(/<!--[\\s\\S]*?-->/gi, \"\")\njava.setContent(src)\nif (java.get('jsContent') == '' || java.get('id') == '') {\n  jsLink = java.getString(\"tag.script@src\").match(/http.+zhmb.+readtool.+\\?v.+/gi)\n  try {\n    jsLink.forEach(link => {\n      jsRaw = java.cacheFile(link)\n      jsContent = jsRaw.match(/eval.+/gi)\n      if (jsContent) {\n        java.put('id', jsRaw.match(/contentid: '.+(?=',)/gi)[0].replace(\"contentid: '\", ''))\n        java.put('jsContent', jsContent[0])\n      } else if (jsContent=jsRaw.match(/.+\\\\x.+/gi)) {\n        java.put('id', jsRaw.match(/contentid: '.+(?=',)/gi)[0].replace(\"contentid: '\", ''))\n        java.put('jsContent', jsContent[0])\n      }\n    \t})\n  \t} catch(e) {\n  \t\t throw(\"正文获取js错误：\\n\"+e+\"\\n正文源码：\\n\"+src)\n  \t}\n  //java.ajaxAll(jsLink).forEach(res => {\n  //  jsRaw = res.body()\n  //})\n}\ntry {\n  h = String(java.getString(\"id.\" + java.get('id') + \"@html\"))\n  h = h.replace(\"&nbsp;&nbsp;\", \"&emsp;\")\n  el = { innerHTML: String(h) }\n  document = { getElementById: () => { return el } }\n  setInterval = function(cb) {\n  \t  cb()\n  \t}\n  window = { document: document, RegExp: RegExp, setInterval: setInterval }\n  eval(String(java.get('jsContent')))\n} catch(e) {\n  java.log(src)\n  throw(\"js 执行错误：\"+e+\"\\njs 内容；\\n\"+jsContent)\n}\nh = el.innerHTML\n\nexpandedStyleSrc = src\nstyleJs = src.match(/<script>.+font.+<\\/script>/gi)\nif (styleJs) {\n  styleJs = styleJs[0].replace(/<.?script>/gi,'')\n  try {\n    rEval = eval\n    eval = function(script) {\n      const expandLines = script.match(/[\\n;][^\\n;]+=\\[[^\\n;]*\\.\\.\\.[^\\n;]*\\][\\n;]/gi)\n      if(expandLines) {\n        expandLines.forEach(line => {\n          l = line.replace(/[\\n;]/gi, \"\")\n          varName = l.split(\"=\")[0]\n          arrExpr = l.split(\"=\")[1].replace(/^\\[|\\]$/gi, \"\").split(/,\\s*/g)\n          result = varName + \"=[];\"\n          arrExpr.forEach(expr => {\n            if (/^\\.\\.\\./i.test(expr)) {\n              result += varName + \"=\" + varName + \".concat(\" + expr.replace(/^\\.\\.\\./i, \"\") + \");\"\n            } else {\n              result += varName + \".push(\" + expr + \")\"\n            }\n          })\n          script = script.replace(line, \"\\n;\" + result + \";\\n\")\n        })\n      }\n      try {\n        rEval(script)\n      } catch(e) {\n        throw(\"\\n嵌套 Eval 执行错误：\"+e+\"\\n嵌套 js 内容：\"+script+\"\\n\")\n      }\n    }\n    \n    function CSSStyleSheet() {\n      this.raw=\"\"\n      this.replaceSync=function(rule) {\n        this.raw=rule\n      }\n    }\n    rEval(styleJs)\n    eval=rEval\n    document.adoptedStyleSheets.forEach(css => {\n      expandedStyleSrc += \"<style>\" + css.raw + \"</style>\"\n    })\n  } catch (e) {\n    java.log(src)\n    throw(\"style js 执行错误：\"+e+\"\\njs 内容；\\n\"+styleJs)\n  }\n}\n\nexpandedStyleSrc.match(/<style>.+<\\/style>/gi).forEach(style => {\n  style=style.replace(/<.?style>/gi,'')\n  if (style.match(/[^{}]*@font-face[^{}]*{[^{}]+}/gi)) {\n    fontRules={}\n    style\n      .match(/[^{}]*@font-face[^{}]*{[^{}]+}/gi)[0]\n      .replace(/[^{}]*@font-face[^{}]*{([^{}]+)}/gi, \"$1\").split(\";\").forEach(rule => {\n        if(rule.split(':')[0].trim())\n          fontRules[rule.split(':')[0].trim()]=rule.split(':')[1].trim()\n      })\n    java.log(JSON.stringify(fontRules))\n    //TODO: 懒得写了，解析字体地址\n    \n    style.replace(/[^{}]*@font-face[^{}]*{([^{}]+)}/gi, \"\").match(/[^{}]+{[^{}]+}/gi).forEach(set => {\n      selector = set.replace(/([^{}]+){([^{}]+)}/gi, \"$1\").trim()\n      rules = {}\n      set.replace(/([^{}]+){([^{}]+)}/gi, \"$2\").split(\";\").forEach(rule => {\n        if(rule.split(':')[0].trim())\n          rules[rule.split(':')[0].trim()]=rule.split(':')[1].trim()\n      })\n      if (rules[\"font-family\"]) {\n        if(rules[\"font-family\"]\n        \t.match(fontRules[\"font-family\"])) {\n          doc=org.jsoup.Jsoup.parse(h);\n          java.log(h)\n          java.log(selector)\n          originText = doc.select(selector).text()\n          java.log(originText)\n          replaceText = java.replaceFont(originText, java.queryTTF(\"https://fastly.jsdelivr.net/gh/jiwangyihao/source-j-legado@main/utils/read.ttf\"), java.queryTTF(\"https://fastly.jsdelivr.net/gh/jiwangyihao/source-j-legado@main/utils/MI LANTING.ttf\"), true)\n          java.log(replaceText)\n          h = h.replace(/<\\/?\\w+>/g,\"\").replace(originText, replaceText)\n        }\n      }\n    })\n  \t}\n})\nh",
      "imageDecode": "",
      "imageStyle": "FULL",
      "nextContentUrl": "##url_next:'([^']*)'##$1###\n@js:\n//121_2.html这样的是下一页，纯数字则是下一章\n//带有catalog是详情页\njava.log(\"url: \"+result)\nif (result==\"\") java.log(src)\nvar isNew=/(\\/(\\d+).html)|catalog/.test(result);\nvar out=isNew?'':result;\nout",
      "payAction": "@js:\nbaseUrl",
      "replaceRegex": "##((?<=[\\u4e00-\\u9fa5“‘「（，])\\s+)?<!--\\s*\\（继续下一页\\）\\s*-->\\s*|((?<=[\\u4e00-\\u9fa5“‘「（，])\\s+)?\\（本章未完\\）\\s*|.+tmygod.+\\n",
      "title": "id.atitle@text"
    },
    "ruleExplore": {
      "author": "class.book-author@ownText",
      "bookList": "@js:\ni = 1;\n\nif (String(src).match(errorReg())) {\n  src=ajax(baseUrl);\n}\njava.setContent(src)\nresult = java.getElement(\"class.book-ol@tag.li\");\nresult;",
      "bookUrl": "a@href",
      "coverUrl": "img@data-src",
      "intro": "class.book-desc@text&&class.ell@text",
      "kind": "class.tag-small-group origin-right@tag.em.0@text&&\nclass.tag-small-group origin-right@tag.em.1@text&&\ntag.time@text\n@js:\nres=[]\nresult.forEach(item=>{\n    item.split(new RegExp(\"[ \\/]\",\"gi\")).forEach(i=>res.push(i))\n})\nres",
      "name": "class.book-li@tag.img@alt",
      "wordCount": "class.tag-small blue@text"
    },
    "ruleSearch": {
      "author": "class.book-author@textNodes",
      "bookList": "@js:\njava.log(cookie.getCookie(baseUrl))\nif (String(result).match(errorReg())&&!result.includes(\"somework\")) {\n  result=ajax(baseUrl);\n}\nif (result.includes(\"no-js\")) {\n  java.log(result)\n  jsContent = java.cacheFile(java.getString(\"tag.script@src\").match(/http.+somework.+\\?v.+/gi)[0])\n  window = {\n    a: result.match(/window.a=\\'.+\\'/gi)[0].replace(/window.a=|\\'/gi, ''),\n    b: result.match(/window.b=\\'.+\\'/gi)[0].replace(/window.b=|\\'/gi, ''),\n    c: result.match(/window.c=\\'.+\\'/gi)[0].replace(/window.c=|\\'/gi, ''),\n    crypto: {\n      subtle: {\n        importKey(format, keyData, algorithm, extractable, keyUsages) {\n          return {\n            then(func) { func(keyData) }\n          }\n        },\n        decrypt(algorithm, key, data) {\n          cipher = java.createSymmetricCrypto(\"AES/CTR/NoPadding\", key, algorithm.counter)\n          return {\n            then: (func) => { func(cipher.decryptStr(data)) }\n          }\n        }\n      }\n    }\n  }\n  setTimeout = () => { }\n  function TextDecoder() { }\n  TextDecoder.prototype.decode = bytes => bytes\n  document = { cookie: \"\" }\n  java.log(jsContent)\n  funcName=String(jsContent).match(/^function.+\\(/gi)[0].replace(/function| |\\(/gi,'')\n  \tjava.log(funcName)\n  eval(funcName + ' = str => java.base64DecodeToByteArray(str)')\n  eval(String(jsContent)\n    .replace(/^function.+\\(/gi, 'function ('))\n  java.log(document.cookie)\n  cookie.replaceCookie(baseUrl, document.cookie)\n  do {\n    t = new Date().getTime()\n    while (new Date().getTime() - t < 5000) { }\n    java.setContent(result = ajax(baseUrl + \",\"\n      + JSON.stringify({\n        headers: {\n          Cookie: cookie.getCookie(baseUrl)\n        }\n      })))\n    java.log(result)\n  } while (result.includes(\"no-js\"))\n}\njava.getElement(\"class.book-ol book-ol-normal@tag.li\")",
      "bookUrl": "tag.a.0@href",
      "checkKeyWord": "我的青春恋爱喜剧",
      "coverUrl": "a@href@js:\nvar id = result.match(/\\/(\\d+)\\.html/)[1];\n'https://www.linovelib.com/files/article/image/'+parseInt(id/1000)+'/'+id+'/'+id+'s.jpg';",
      "intro": "class.book-desc@text",
      "kind": "class.tag-small-group origin-right@tag.em@text\n@js:\nres=[]\nresult.forEach(item=>{\n    item.split(new RegExp(\"[ \\/]\",\"gi\")).forEach(i=>res.push(i))\n})\nres",
      "name": "class.book-title-x@class.book-title@text"
    },
    "ruleToc": {
      "chapterList": "@js:\nif (String(src).match(errorReg())) {\n  src=ajax(baseUrl);\n}\njava.setContent(src)\nresult = java.getElement(\"id.catelogX@.chapter-li:not(.volume-cover)\");\n    //排除目录受卷封面跳转链接的影响\n    //现实debug(尝试修复正文链接问题，和目录不全)\n    //《好友角色的我怎么可能大受欢迎》第三卷12\n    //《我的青春恋爱喜剧》\n    //2022-8-19\n    //原来的代码在源注释（已移除）\n    //2022-8-20修复https://w.linovelib.com/novel/2765.html目录加载失败\n    //2023-9-30使用易于理解的变量命名\n    //2023-10-7处理cid(1)以及连续多个cid(0)\n    //2023-11-11解决了一个原来手滑写出的bug\n    //2023-11-16处理连续多个卷名\n    //2023-12-12适配新版卷名\n    //2024-2-6处理《谁说从妥协开始的恋爱一定没结果》\n\nres = result\n//java.log(res)\n\nfor (i = 0; i < res.length; i++) {\n    java.setContent(res[i])\n    if (java.getString(\"tag.a@href\").match(/javascript:cid\\(.+\\)/gi)) {\n        if (String(res[(i == res.length - 1?i:i+1)]).match(/javascript:cid\\(.+\\)/gi)) {\n            java.setContent(res[i - 1])\n            prevLink = java.getString(\"tag.a@href\")\n            if (prevLink == \"\") {\n                java.setContent(res[i - 2])\n                prevLink = java.getString(\"tag.a@href\")\n            }\n            content = ajax(source.bookSourceUrl + prevLink)\n            java.setContent(content)\n            foot = java.getElements(\"id.footlink\")\n            path = prevLink\n\n            //java.log(foot)\n            while (String(foot).match(/下一页|下一頁/gi)) {\n            \t    //java.log(foot)\n                str = content.match(/<script type\\=\\\"text\\/javascript\\\">var ReadParams.*/)\n                path = String(str).match(/url_next\\:'.*?html/)[0].replace(\"url_next:'\", \"\")\n                content = java.ajax(\"https://w.linovelib.com\" + path)\n                java.setContent(content)\n                foot = java.getElements(\"id.footlink\")\n            }\n\n            next = ajax(source.bookSourceUrl + path)\n            str = next.match(/<script type\\=\\\"text\\/javascript\\\">var ReadParams.*/)\n            path = String(str).match(/url_next\\:'.*?html/)[0].replace(\"url_next:'\", \"\")\n            java.log('l:'+path)\n            res[i] = String(res[i]).replace(/javascript:cid\\(.+\\)/gi, path)\n        } else {\n            nextLink = \"\"\n            for (var j=1;nextLink==\"\";j++) {\n                java.setContent(res[i + j])\n                nextLink = java.getString(\"tag.a@href\")\n            }\n            next = ajax(source.bookSourceUrl + nextLink)\n            str = next.match(/<script type\\=\\\"text\\/javascript\\\">var ReadParams.*/)\n            try {\n              path = String(str).match(/url_previous\\:'.*?html/)[0].replace(\"url_previous:'\", \"\")\n            } catch(e) {\n            \t  java.toast(String(next)+\"\\n\")\n            \t  java.log(next)\n            \t  throw(\"目录解析报错开始：\\n\"+String(next)+\"\\n结束\")\n            \t}\n            //java.log(path)\n\n            res[i] = String(res[i]).replace(/javascript:cid\\(.+\\)/gi, path)\n        }\n    }\n\n    //java.log(res[i])\n}\nres",
      "chapterName": "text",
      "chapterUrl": "@js:\n//只有不为卷名时返回URL，避免阅读自动合并\njava.getString(\"class.chapter-bar@text\")!=java.getString(\"text\") ? java.getString(\"tag.a@href\") : \"\"",
      "isVolume": "@js:\njava.getString(\"class.chapter-bar@text\")==java.getString(\"text\")",
      "updateTime": ""
    },
    "searchUrl": "<js>\npage == 1 ?\n  \"/search.html?searchkey={{key}}&searchtype=all\"\n  :\n  '/search/{{key}}_{{page}}.html'\n</js>",
    "weight": 0
  }
,

  {
    "bookSourceComment": "建议登录\n\n酷安 @吉王义昊\nGitHub：https://github.com/jiwangyihao/source-j-legado\n\n# 关于许可的额外声明（在线版本参见 GitHub，以在线版本为准）\n\n- 当许可证与本声明冲突时，以本声明为准；\n- 对于本仓库中的任意代码片段：按照 `MPL 2.0` 中有关约定执行；\n- 对于本仓库中的某一完整书源的转载或二次开发，需满足以下全部条件：\n  - 在[本仓库](https://github.com/jiwangyihao/source-j-legado)的 `issue` 中提出请求并具体说明转载地址、二次开发后的书源开源地址以及其他必要信息；\n  - 等待原作者（即本仓库的初始所有者和初始代码贡献者 [@jiwangyihao](https://github.com/jiwangyihao)）查看并通过 `issue` 或依据原作者要求更改转载方式或补充更详细的信息。\n  - 考虑到本项目弃坑的可能，新 `issue` 开启后超过 20 个工作日原作者没有回复或者原作者回复要求更改的 `issue` 在更改后超过 20 个工作日原作者没有回复即视为原作者通过该 `issue`：\n    - 此处的 `issue` 仅包括在[本仓库](https://github.com/jiwangyihao/source-j-legado)开启的，处于「开启状态」的 issue。（也就是说，请不要在已经关闭的 issue 中回复）。\n    - 对于此种方式通过的 issue，转载/二次开发者仍应当遵守本声明中已经写明的相关约定。\n  - 不得上传至源仓库或整理至`非轻小说专用`的书源合集中并应当避免其他人将转载/二次开发版本上传至源仓库或整理至`非轻小说专用`的书源合集中：\n    - 关于轻小说的定义的额外说明：不包括国内的原创网络文学作品（如 `SF 轻小说` 中的原创轻小说以及`起点中文网`中标签包含轻小说的作品）。\n    - 轻小说专用的定义：有且仅有想看轻小说的人可能会添加。\n  - 必须在转载/二次开发地址的明显位置完整包含本声明的全部内容。\n  - 必须保留源注释中原有的更改记录。\n\n原整理修改：GitHub@ZWolken\n原作者：酷安户山香澄Official\n\n2024.5.1\n酷安 @吉王义昊\n更改登录URL\n书源内链接改用相对URL\n更改发现\n更改部分页面显示效果\n2024.7.19\n酷安 @吉王义昊\n空白封面时返回无封面以便使用阅读默认封面",
    "bookSourceGroup": "轻小说",
    "bookSourceName": "ESJ Zone",
    "bookSourceType": 0,
    "bookSourceUrl": "https://www.esjzone.one",
    "bookUrlPattern": "https?://www.esjzone.one/detail/.*",
    "customOrder": 0,
    "enabled": true,
    "enabledCookieJar": true,
    "enabledExplore": true,
    "exploreUrl": "@js:\nresult=[\n  {\n    'title': '>> 个人中心 <<',\n    'url': \"\",\n    'style':{\n      layout_flexGrow:1,\n      layout_flexBasisPercent:1\n    }\n  },\n  {\n    'title': \"我的收藏\",\n    'url': `/my/favorite`,\n    'style':{\n      layout_flexGrow:2,\n      layout_flexBasisPercent:0.25\n    \t}\n  },\n  {\n    'title': \"观看记录\",\n    'url': `/my/view`,\n    'style':{\n      layout_flexGrow:2,\n      layout_flexBasisPercent:0.25\n    \t}\n  }\n]\nhtml=org.jsoup.Jsoup.parse(java.ajax(source.bookSourceUrl+\"/list-01/\"))\ncategorys=html.select(\"#category option\")\nsortings=html.select(\"#sorting option\")\ncategorys.forEach(category => {\n  result.push({\n    'title': '>> ' + java.t2s(category.text()) + ' <<',\n    'url': \"\",\n    'style':{\n      layout_flexGrow:1,\n      layout_flexBasisPercent:1\n    }\n  })\n  sortings.forEach(sorting => {\n    result.push({\n      'title': java.t2s(sorting.text()),\n      'url':`/list-${category.attr('value')}${sorting.attr('value')}/{{page}}.html`,\n      'style':{\n        layout_flexGrow:2,\n        layout_flexBasisPercent:0.25\n      \t}\n    })\n  })\n})\nJSON.stringify(result)",
    "lastUpdateTime": 1732197018441,
    "loginUrl": "/my/profile.html",
    "respondTime": 2438,
    "ruleBookInfo": {
      "author": "class.list-unstyled mb-2 book-detail@tag.li.1@tag.a@text\n@js:\njava.t2s(result)",
      "canReName": "true",
      "coverUrl": "@css:div.col-md-3 > div > a > img@src",
      "intro": "{{@@section.m-t-20@a.tag@text##(^|[\\n])##🏷️}}\n{{'&lrm;'}}\n{{@@div.description@html}}\n@js:\njava.t2s(result)",
      "kind": "关注：{{@css:.book-detail label:has(.icon-eye)@text}},喜欢：{{@css:.book-detail label:has(.icon-heart)@text}}\n{{@@class.list-unstyled mb-2 book-detail@tag.li.-2@text##.+: }}\n{{@@class.list-unstyled mb-2 book-detail@tag.li.-1@text## .+}}",
      "lastChapter": "@css:div[id = chapterList] >a:last-child@text\n@js:\njava.t2s(result)",
      "name": "@css:div.col-md-9.book-detail > h2@text\n@js:\njava.t2s(result)",
      "tocUrl": "",
      "wordCount": "@css: .book-detail label:has(.icon-file-text)@text##,##"
    },
    "ruleContent": {
      "content": "@css:div.forum-content.mt-3,div[class =d_post_content j_d_post_content]@all\n@js:\njava.t2s(result)"
    },
    "ruleExplore": {
      "author": "",
      "coverUrl": "",
      "wordCount": ""
    },
    "ruleSearch": {
      "author": "class.card-author@tag.a@text\n@js:\njava.t2s(result)",
      "bookList": "@css: div.col-xl-9.col-lg-8.p-r-30 > div.row > div || .product-item",
      "bookUrl": "@css:div> div > div > h5 > a, .product-title > a@href",
      "coverUrl": "class.main-img@class.lazyload@data-src\n@js:\nresult.match(\"empty\") ? \"\" : result",
      "intro": "class.book-ep@div.-1@text\n@js:\njava.t2s(result)",
      "kind": "{{@css:.column:has(.icon-star-s)@text}},关注：{{@css:.column:has(.icon-eye)@text}},喜欢：{{@css:.column:has(.icon-heart)@text}},羽毛：{{@css:.column:has(.icon-feather)@text}},评论：{{@css:.column:has(.icon-message-square)@text}}##(\\([^()]+)##星$1人\n@js:\n!!result.split(\",\")[0] ? result : java.getString(\"class.book-update@text\")",
      "lastChapter": "@css:div>div>div[class=card-ep mt-2], .book-ep a@text\n@js:\njava.t2s(result)",
      "name": "@css: .card-title a, .product-title@text\n@js:\njava.t2s(result)",
      "wordCount": "@css: .column:has(.icon-file-text)@text##,##"
    },
    "ruleToc": {
      "chapterList": "#chapterList@a[data-title], p.non, summary",
      "chapterName": "text\n@js:\njava.t2s(result)",
      "chapterUrl": "href",
      "isVolume": "p.non@text||summary@text"
    },
    "searchUrl": "/tags/{{key}}/{{page}}.html",
    "weight": 0
  }
,

  {
    "bookSourceComment": "仅支持网络小说（非文库本）\n\n酷安 @吉王义昊\nGitHub：https://github.com/jiwangyihao/source-j-legado\n\n# 关于许可的额外声明（在线版本参见 GitHub，以在线版本为准）\n\n- 当许可证与本声明冲突时，以本声明为准；\n- 对于本仓库中的任意代码片段：按照 `MPL 2.0` 中有关约定执行；\n- 对于本仓库中的某一完整书源的转载或二次开发，需满足以下全部条件：\n  - 在[本仓库](https://github.com/jiwangyihao/source-j-legado)的 `issue` 中提出请求并具体说明转载地址、二次开发后的书源开源地址以及其他必要信息；\n  - 等待原作者（即本仓库的初始所有者和初始代码贡献者 [@jiwangyihao](https://github.com/jiwangyihao)）查看并通过 `issue` 或依据原作者要求更改转载方式或补充更详细的信息。\n  - 考虑到本项目弃坑的可能，新 `issue` 开启后超过 20 个工作日原作者没有回复或者原作者回复要求更改的 `issue` 在更改后超过 20 个工作日原作者没有回复即视为原作者通过该 `issue`：\n    - 此处的 `issue` 仅包括在[本仓库](https://github.com/jiwangyihao/source-j-legado)开启的，处于「开启状态」的 issue。（也就是说，请不要在已经关闭的 issue 中回复）。\n    - 对于此种方式通过的 issue，转载/二次开发者仍应当遵守本声明中已经写明的相关约定。\n  - 不得上传至源仓库或整理至`非轻小说专用`的书源合集中并应当避免其他人将转载/二次开发版本上传至源仓库或整理至`非轻小说专用`的书源合集中：\n    - 关于轻小说的定义的额外说明：不包括国内的原创网络文学作品（如 `SF 轻小说` 中的原创轻小说以及`起点中文网`中标签包含轻小说的作品）。\n    - 轻小说专用的定义：有且仅有想看轻小说的人可能会添加。\n  - 必须在转载/二次开发地址的明显位置完整包含本声明的全部内容。\n  - 必须保留源注释中原有的更改记录。\n\n2024.4.10\n酷安 @吉王义昊\n处理目录中的卷名\n解决了章节中的引号导致加载目录失败的问题\n2024.5.7\n酷安 @吉王义昊\n支持登录\n支持网站阅读历史\n支持收藏（多收藏夹）\n新增发现\n2024.5.31\n酷安 @吉王义昊\n修正优先级序列模式下意外忽略后续翻译源的问题\n2024.6.21\n酷安 @吉王义昊\n跟进最新 API 更改\n2024.7.8\n酷安 @吉王义昊\n跟进源站发现更改\n2024.7.23\n酷安 @吉王义昊\n跟进源站登录更改\n2024.8.10\n酷安 @吉王义昊\n支持添加网址\n2024.10.28\n酷安 @吉王义昊\n支持「Lordly•阅读」\n支持在正文中加载图片",
    "bookSourceGroup": "轻小说,机翻",
    "bookSourceName": "轻小说机翻🤖",
    "bookSourceType": 0,
    "bookSourceUrl": "https://books.fishhawk.top/",
    "bookUrlPattern": "https?://books1?.fishhawk.top/(api/)?novel/\\w+/\\w+",
    "customOrder": -41330,
    "enabled": true,
    "enabledCookieJar": true,
    "enabledExplore": true,
    "exploreUrl": "@js:\nresult=[\n  {\n    'title': '>> 个人中心 <<',\n    'url': \"\",\n    'style':{\n      layout_flexGrow:1,\n      layout_flexBasisPercent:1\n    }\n  },\n  {\n    'title': \"阅读历史\",\n    'url': `/api/user/read-history?page={{page-1}}&pageSize=30`,\n    'style':{\n      layout_flexGrow:2,\n      layout_flexBasisPercent:0.25\n    \t}\n  }\n]\nfavored = String(java.ajax(source.bookSourceUrl + \"/api/user/favored\"))\nif (favored.match(\"Token不合法或者过期\")) {\n  result[0].title = '>> 个人中心 | 未登录 <<'\n} else {\n  favored = JSON.parse(java.ajax(source.bookSourceUrl + \"/api/user/favored\")).favoredWeb\n  favored.forEach(favor => {\n    result.push({\n      'title': favor.title,\n      'url': `/api/user/favored-web/${favor.id}?page={{page-1}}&pageSize=30&sort=update`,\n      'style':{\n        layout_flexGrow:2,\n        layout_flexBasisPercent:0.25\n      \t}\n    })\n  })\n}\nString(java.ajax(`https://github.moeyy.xyz/https://raw.githubusercontent.com/FishHawk/auto-novel/main/web/src/pages/layouts/MainLayout.vue, {\n  \"headers\": {\n    \"Authorization\": \"\"\n  }\n}`))\n.match(/label:.?'小说排行'[^\\]]+]/gi)[0]\n.match(/renderLabel\\(.+\\)/gi)\n.forEach((menu,index)=>{\n  if (index!=1) {\n    title=menu.replace(/renderLabel\\('(.+)',.?'(.+)'\\)/gi, \"$1\")\n    href=menu.replace(/renderLabel\\('(.+)',.?'(.+)'\\)/gi, \"$2\")\n    result.push({\n      'title': `>> ${title} <<`,\n      'url': \"\",\n      'style':{\n        layout_flexGrow:1,\n        layout_flexBasisPercent:1\n      }\n    })\n    html = org.jsoup.Jsoup.parse(String(java.webView(null,source.bookSourceUrl + href.replace(/^\\//i,''),null)))\n    sorts = html.select(\".n-layout-scroll-container h1 + div.n-flex > .n-flex\")\n    sorts[0].select(\".n-flex > .n-flex > .n-flex > span\").forEach(tag => {\n      result.push({\n        'title': tag.text(),\n        'url': href.replace(/\\/(.+)\\/(.+)\\/(.+)/gi, \"$3\") != \"2\" ? `/api/novel/rank/${href.replace(/\\/(.+)\\/(.+)\\/(.+)/gi, \"$2\")}?type=${title.replace(/(.+)：(.+)/gi,\"$2\").replace(\"异世界转移/转生\", \"异世界转生/转移\")}&genre=${tag.text()}&range=总计&status=全部&page={{page-1}}` : `/api/novel/rank/${href.replace(/\\/(.+)\\/(.+)\\/(.+)/gi, \"$2\")}?type=${title.replace(/(.+)：(.+)/gi,\"$2\")}&range=${tag.text()}&status=全部&page={{page-1}}`,\n        'style':{\n          layout_flexGrow:2,\n          layout_flexBasisPercent:0.4\n        \t}\n      })\n    \t})\n  }\n})\nJSON.stringify(result)",
    "jsLib": "function getConfig() {\n  const { book, source, java } = this\n  const config = {\n  \t  language: \"中日\",\n  \t  translation: \"SGYB\",\n  \t  translationArr: []\n  \t}\n  \tconst languages = [\n  \t  \"日文\",\n    \"中文\",\n    \"中日\",\n    \"日中\"\n  ]\n  const translations = {\n  \t  B: \"baiduParagraphs\",\n  \t  Y: \"youdaoParagraphs\",\n  \t  G: \"gptParagraphs\",\n  \t  S: \"sakuraParagraphs\"\n  \t}\n  \tfunction applyTran(tranStr) {\n  \t  config.translation=tranStr\n  \t  if (tranStr===\"并列\") tranStr=\"SGYB\"\n  \t  let tranArr = []\n  \t  for (let i=0; i<tranStr.length; i++) {\n  \t  \t  tranArr.push(translations[tranStr.charAt(i)])\n  \t  \t}\n  \t  \tconfig.translationArr=tranArr\n  \t}\n  \tfunction applyLanguage(lang) {\n  \t  if (languages.includes(lang))\n  \t  \t  config.language=lang\n  \t}\n  applyTran(config.translation)\n  const sVar = String(source.getVariable()).replace(/\\s/gi, '').split('-')\n  if (sVar[0]) applyLanguage(sVar[0])\n  if (sVar[1]) applyTran(sVar[1])\n  const bVar = String(book.getVariable(\"custom\")).replace(/\\s/gi, '').split('-')\n  if (bVar[0]) applyLanguage(bVar[0])\n  if (bVar[1]) applyTran(bVar[1])\n  return config\n}",
    "lastUpdateTime": 1730100786782,
    "loginUi": "[\n  {\n    \"name\": \"账号\",\n    \"type\": \"text\"\n  },\n  {\n    \"name\": \"密码\",\n    \"type\": \"password\"\n  }\n]",
    "loginUrl": "@js:\nfunction login() {\n  let une = source.getLoginInfoMap().get(\"账号\")\n  let pwd = source.getLoginInfoMap().get(\"密码\")\n  if (une && pwd) {\n    let body = JSON.stringify({\n      emailOrUsername: une,\n      password: pwd\n    })\n    let url = source.bookSourceUrl + '/api/auth/sign-in'\n    let res = java.post(url, body, {\n      \"Content-Type\": \"application/json\"\n    })\n    if (res.body().match(/错误/gi)) {\n      throw(res.body())\n    }\n    //throw(String(res.body()))\n    //result = JSON.parse(res.body())\n    \n    let header = JSON.stringify({\n      \"Authorization\": \"Bearer \" + res.body()\n    })\n    source.putLoginHeader(header)\n  }\n}",
    "respondTime": 180000,
    "ruleBookInfo": {
      "author": "$.authors.*.name",
      "init": "@js:\nif (!/api/g.test(book.bookUrl)) {\n  book.bookUrl=book.bookUrl.replace(\"novel\",\"api/novel\")\n  result=java.ajax(book.bookUrl)\n}\nresult=JSON.parse(result)\nresult.points+=' PT'\nresult.visited+=' 浏览'\nJSON.stringify(result)",
      "intro": "当前规则：语言展现形式-{{getConfig().language}}，翻译优先级-{{getConfig().translation}}（可在源变量或书籍变量中修改，详情参考变量说明）\n\n{{$.titleJp}}\n总计：{{$.total}} 百度：{{$.baidu}} 有道：{{$.youdao}} GPT：{{$.gpt}} Sakura：{{$.sakura}}\n\n{{$.introductionZh}}\n\n{{$.introductionJp}}",
      "kind": "$.attentions&&$.type&&$.points&&$.visited&&$.keywords",
      "lastChapter": "{{$.toc[-1].chapterId}} - {{$.toc[-1].titleZh||$.toc[-1].titleJp}}",
      "name": "$.titleZh",
      "tocUrl": "",
      "wordCount": "$.totalCharacters"
    },
    "ruleContent": {
      "content": "@js:\nresult=JSON.parse(result)\nconst config=getConfig()\nconst resultList=[]\nfor (let ip = 0; ip < result.paragraphs.length; ip++) {\n  let p = result.paragraphs[ip]\n  if (/^<图片>http.+$/.test(p)) {\n    p = '<img src=\"'+p.replace(/^<图片>/i, \"\")+'\">'\n    resultList.push(p)\n    continue\n  }\n  function generateTran(i) {\n    const chars = {\n  \t    baiduParagraphs: \"ᵇ\",\n  \t    youdaoParagraphs: \"ʸ\",\n  \t    gptParagraphs: \"ᵍ\",\n  \t    sakuraParagraphs: \"ˢ\"\n    }\n    if (config.translation===\"并列\") {\n      const processed=[]\n      for (let ii = 0; ii < config.translationArr.length; ii++) {\n        let t = config.translationArr[ii]\n        if (result[t]) {\n          if (/^<图片>http.+$/.test(result[t][i])) {\n            let tmp = '<img src=\"'+result[t][i].replace(/^<图片>/i, \"\")+'\">'\n            if (!processed.includes(tmp))\n              processed.push(tmp)\n            \tcontinue\n          }\n          processed.push((result[t][i]!=\"\" ? chars[t] : \"\") + result[t][i].trim())\n          continue\n        }\n        processed.push(\"\")\n      }\n      return processed.join(\"\\n\")\n    } else {\n      for (let tt=0; tt<config.translationArr.length; tt++) {\n        let t=config.translationArr[tt]\n        if (result[t]) {\n          if (/^<图片>http.+$/.test(result[t][i])) {\n            let tmp = '<img src=\"'+result[t][i].replace(/^<图片>/i, \"\")+'\">'\n            return tmp\n          }\n          return (result[t][i]!=\"\" ? chars[t] : \"\") + result[t][i].trim()\n        }\n      }\n    }\n  \t}\n  switch (String(config.language)) {\n  \t  case \"日文\":\n  \t    resultList.push(p)\n  \t    break\n  \t  case \"中文\":\n  \t    resultList.push(generateTran(ip))\n  \t    break\n  \t  case \"中日\":\n  \t    resultList.push([generateTran(ip), p.trim()].join(\"\\n\"))\n  \t    break\n  \t  case \"日中\":\n  \t    resultList.push([p, generateTran(ip)].join(\"\\n\"))\n  \t    break\n  \t}\n}\nresultList.join(\"\\n\")"
    },
    "ruleExplore": {},
    "ruleSearch": {
      "bookList": "$.items",
      "bookUrl": "/api/novel/{{$.providerId}}/{{$.novelId}}",
      "checkKeyWord": "驯兽师少女的逃亡日记",
      "intro": "{{$.titleJp}}\n总计：{{$.total}} 百度：{{$.baidu}} 有道：{{$.youdao}} GPT：{{$.gpt}} Sakura：{{$.sakura}}",
      "kind": "$.attentions&&$.type&&$.keywords",
      "lastChapter": "@js:\n`{{$.total}} - ` + new Date(parseInt({{$.updateAt}}) * 1000).toJSON().replace(/T|\\.\\d+Z/gi, ' ')",
      "name": "$.titleZh||$.titleJp"
    },
    "ruleToc": {
      "chapterList": "$.toc",
      "chapterName": "@js:\n`{{$.chapterId}}` ? `{{$.chapterId}} - {{$.titleZh}}` : `{{$.titleZh}} - {{$.titleJp}}`",
      "chapterUrl": "@js:\n`{{$.chapterId}}` ? `{{baseUrl}}/chapter/{{$.chapterId}}` : ''",
      "isVolume": "@js:\n!`{{$.chapterId}}`",
      "updateTime": "@js:\n`{{$.chapterId}}` ? (`{{$.titleJp}} - ` + (`{{$.createAt}}` ? new Date(parseInt({{$.createAt}}) * 1000).toJSON().replace(/T|\\.\\d+Z/gi, ' ') : '暂无')) : ''"
    },
    "searchUrl": "/api/novel?page={{page-1}}&pageSize=20&query={{key}}&provider=kakuyomu%2Csyosetu%2Cnovelup%2Chameln%2Cpixiv%2Calphapolis&level=0&type=0&translate=0&sort=0",
    "variableComment": "设置正文语言展现形式及翻译优先级\n！错误的设置可能导致书源工作不正常\n格式：语言展现形式 - 翻译优先级\n\n语言展现形式：\n- 日文\n- 中文\n- 中日\n- 日中\n翻译优先级：\n- 并列（展示所有存在的翻译）\n- 优先级序列，写在前面的优先采用，B-百度、Y-有道、G-GPT、S-Sakura，如 `SGYB`\n\n示例（默认值）：中日 - SGYB\n示例：中文 - 并列",
    "weight": 0
  }
,

  {
    "bookSourceComment": "",
    "bookSourceGroup": "番茄小说",
    "bookSourceName": "番茄【FQWeb自建】- 模板",
    "bookSourceType": 0,
    "bookSourceUrl": "在此填写你的服务器地址",
    "customOrder": -41332,
    "enabled": true,
    "enabledCookieJar": false,
    "enabledExplore": true,
    "exploreUrl": "@js:\nsort0=[];//女频\nsort1=[];//男频\npush=(title, url, type1, type2)=>{\n\t\tjson = {\n\t\t\t\ttitle: title,\n\t\t\t\turl: url?url:\"\",\n\t\t\t\tstyle: {\n\t\t\t\t\t\tlayout_flexGrow: 1,\n\t\t\t\t\t\tlayout_flexBasisPercent: type1\n\t\t\t\t\t}\n\t\t\t};\n\t\treturn eval('sort'+type2+'.push(json)');\n\t};\n$$=(gender, tags, status, sort)=>{\n\t\treturn `https://tsearch.toutiaoapi.com/2/wap/search/extra/novel_operator?tab_name=%25E5%2585%25A8%25E9%2583%25A8%25E5%2588%2586%25E7%25B1%25BB&ala_src=novel_tag&gender=${gender}&is_finish=0&iid=2008145514494631&aid=13&app_name=news_article&version_code=692&version_name=6.9.2&abflag=3&partner=novel_tag&passback={{(page-1)*10}}&limit=10&tags=%5B%22${tags}%22%5D&creation_status=${status}&word_num=0&sort=${sort}`\n\t};\n\nstatus=\"ALL\",sort=0;\n[\n\t\t\t\t[\"女\",[[\"无敌\",384],[\"种田\",23],[\"萌宝\",28],[\"美食\",78],[\"游戏动漫\",57],[\"娱乐圈\",43],[\"直播\",69],[\"女扮男装\",388],[\"二次元\",39],[\"团宠\",94],[\"无cp\",392],[\"青梅竹马\",387],[\"病娇\",380],[\"科幻\",8],[\"武侠\",16],[\"年代\",79],[\"重生\",36],[\"灵异\",100],[\"公主\",83],[\"甜宠\",96],[\"盗墓\",81],[\"系统\",19],[\"女强\",86],[\"皇后\",84],[\"推理\",61],[\"文化历史\",62],[\"生活\",48],[\"反派\",369],[\"末世\",68],[\"悬疑\",10],[\"穿越\",37],[\"学霸\",82],[\"扮猪吃虎\",93],[\"清穿\",76],[\"穿书\",382],[\"快穿\",24],[\"皇叔\",87],[\"空间\",44],[\"宠妻\",30],[\"豪门总裁\",29],[\"影视小说\",45],[\"成功励志\",56],[\"职场\",127],[\"民国\",390],[\"都市生活\",2],[\"腹黑\",92],[\"星际\",77],[\"天才\",90],[\"古代言情\",5],[\"家庭\",125],[\"兽世\",72],[\"校园\",4],[\"诗歌散文\",46],[\"虐文\",95],[\"嫡女\",88],[\"王妃\",85],[\"精灵\",89],[\"幻想言情\",32],[\"现代言情\",3],[\"现言甜宠\",395],[\"现言脑洞\",267],[\"先婚后爱\",265],[\"都市日常\",261],[\"古言脑洞\",253],[\"古言萌宝\",249],[\"古言甜宠\",394],[\"现言日常\",269],[\"现言复仇\",268],[\"玄幻言情\",248],[\"医术\",247],[\"马甲\",266]]],\n\t\t[\"男\",[[\"玄幻\",7],[\"神豪\",20],[\"鉴宝\",17],[\"三国\",67],[\"二次元\",39],[\"历史\",12],[\"美食\",78],[\"奶爸\",42],[\"娱乐圈\",43],[\"洪荒\",66],[\"大唐\",73],[\"外卖\",75],[\"末世\",68],[\"都市\",1],[\"宠物\",74],[\"学霸\",82],[\"游戏动漫\",57],[\"科幻\",8],[\"体育\",15],[\"直播\",69],[\"年代\",79],[\"文化历史\",62],[\"诸天万界\",71],[\"海岛\",40],[\"神医\",26],[\"明朝\",126],[\"武侠\",16],[\"灵异\",100],[\"星际\",77],[\"穿越\",37],[\"剑道\",80],[\"都市修真\",124],[\"赘婿\",25],[\"盗墓\",81],[\"推理\",61],[\"无限流\",70],[\"种田\",23],[\"战争\",97],[\"天才\",90],[\"职场\",127],[\"悬疑\",10],[\"成功励志\",56],[\"重生\",36],[\"系统\",19],[\"空间\",44],[\"腹黑\",92],[\"诗歌散文\",46],[\"家庭\",125],[\"影视小说\",45],[\"生活\",48],[\"都市生活\",2],[\"扮猪吃虎\",93],[\"大秦\",377],[\"无敌\",384],[\"漫威\",374],[\"火影\",368],[\"西游\",373],[\"龙珠\",376],[\"聊天群\",381],[\"海贼\",370],[\"奥特同人\",367],[\"特种兵\",375],[\"反派\",369],[\"校花\",385],[\"女帝\",378],[\"单女主\",389],[\"神奇宝贝\",371],[\"九叔\",383],[\"求生\",379],[\"无女主\",391],[\"武魂\",386],[\"网游\",372],[\"战神\",27],[\"都市脑洞\",262],[\"都市种田\",263],[\"都市日常\",261],[\"历史脑洞\",272],[\"玄幻脑洞\",257],[\"奇幻仙侠\",259],[\"都市青春\",396],[\"传统玄幻\",258],[\"历史古代\",273]]]\n\t].map(([title,list], gender)=>{\n\t\tpush('༺ˇ»`ʚ'+title+'生频道ɞ´«ˇ༻',null,1,gender);\n\t\tlist.map([title,tags]=>{\n\t\t\t\tpush('༺ '+title+' ༻',(gender, tags, status, sort), 1,gender);\n\t\t\t\t[\"推荐\",\"评分\",\"热门\"].map((title,sort)=>{\n\t\t\t\t\t\t[ [\"[\"+title+\"]\",\"ALL\"],[\"完结\",\"Finished\"],[\"连载\",\"Loading\"] ].map([title,status]=>{\n\t\t\t\t\t\t\t\treturn push(title, $$(gender, tags, status, sort), 0.25,gender);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t});\n\t});\nJSON.stringify(\n\tsort1\n\t//.concat(sort0) //是否显示女频\n);",
    "header": "{\"User-Agent\":\"com.dragon.read/306 (Linux; U; Android 8.1.0; zh_CN; MI PAD 4; Build/OPM1.171019.019; Cronet/TTNetVersion:4df3ca9d 2019-11-25)\",\"accept\":\"application/json; charset=utf-8\",\"sdk-version\":\"1\"}",
    "lastUpdateTime": 1730412128646,
    "loginUrl": "",
    "respondTime": 180000,
    "ruleBookInfo": {
      "author": "$.author##<em>|</em>",
      "canReName": "",
      "coverUrl": "$.thumb_url",
      "init": "$.data[0]",
      "intro": "🏷️ 标签：{{$.tags}}{{'\\n&lrm;\\n'}}\n \n &nbsp;\n \n\n 📉开书时间：{{$.create_time##T.*}}{{'\\n&lrm;\\n'}}\n  📈更新时间：{{java.timeFormat(java.getString('$..last_chapter_update_time')*1000)}}{{'\\n&lrm;\\n'}}\n  👥 主角：{{$.roles##\\[|\\\"|\\]}}\n{{'\\n&lrm;\\n'}}\n💠 原名：{{$.original_book_name}}{{'\\n&lrm;\\n'}}\n🔋 别名：{{$.book_flight_alias_name}}  \n\n{{'\\n&lrm;\\n'}}📮 简介：{{$..abstract}}{{'\\n'+'​'}}\n📍 {{$.copyright_info##，.*##。}}\n@js:result.replace(/.+：(人在读)?\\s/g,'')",
      "kind": "{{$..category}},连载{{$..creation_status}}完结,{{$..score}}分,{{$..create_time##T.*}}@js:result.replace(/连载0完结/g,'完结').replace(/连载1完结/g,'连载').replace(/连载4完结/g,'已断更').replace(/连载-1完结/g,'完结')",
      "lastChapter": "{{$.last_chapter_title}} • {{java.timeFormat(java.getString('$.last_chapter_update_time')*1000)}}",
      "name": "$.book_name",
      "tocUrl": "https://fanqienovel.com/api/reader/directory/detail?bookId={{$..book_id}}",
      "wordCount": "$.word_number"
    },
    "ruleContent": {
      "content": "$..content",
      "replaceRegex": "##.*本节目由.*|.*出品.*",
      "sourceRegex": ""
    },
    "ruleExplore": {
      "author": "$.author",
      "bookList": "$[0].content[*]",
      "bookUrl": "https://api5-normal-lf.fqnovel.com/reading/bookapi/multi-detail/v/?book_type=0&from=2&book_id={{$.book_id}}&get_related_audio_infos=0&iid=3626627309538941&device_id=62070595540&ac=wifi&mac_address=7C%3A03%3AAB%3A73%3A27%3A7E&channel=novel_xiaomi2020_306_yz1&aid=1967&app_name=novelapp&version_code=306&version_name=3.0.6.17&device_platform=android&ssmix=a&device_type=MI+PAD+4&device_brand=Xiaomi&language=zh&os_api=27&os_version=8.1.0",
      "coverUrl": "$.thumb_url",
      "intro": "$.abstract",
      "kind": "{{$.source}}\n{{$.category}}\n{{$.complete_category}}\n{{$.tags}}",
      "lastChapter": "",
      "name": "$.book_name",
      "wordCount": "$..word_number"
    },
    "ruleSearch": {
      "author": "$.author##<em>|</em>",
      "bookList": "$.data.ret_data.*||$..book_data[*]||$..book_info[*]",
      "bookUrl": "https://api5-normal-sinfonlineb.fqnovel.com/reading/bookapi/multi-detail/v/?aid=1967&iid=1&version_code=999&book_id={{java.get(\"book_id\")}}",
      "checkKeyWord": "转生三无猫娘，成神的我只想摸鱼",
      "coverUrl": "$.thumb_url",
      "intro": "$.abstract",
      "kind": "$.category&&$.tags",
      "lastChapter": "",
      "name": "$.book_name||$.title\n<js>\njava.put(\"book_id\", java.getString(\"$.book_id\"))\nresult\n</js>\n##<em>|</em>|《|》",
      "wordCount": "连载{{$.creation_status}}完本##连载0|1完本"
    },
    "ruleToc": {
      "chapterList": "$.data.chapterListWithVolume.*.*",
      "chapterName": "$.title",
      "chapterUrl": "@js:\nsource.bookSourceUrl + `/content?item_id={{$.itemId}}`",
      "isVip": "",
      "isVolume": "",
      "updateTime": "$.info"
    },
    "searchUrl": "/search?query={{key}}",
    "weight": 0
  }
,

  {
    "bookSourceComment": "酷安 @吉王义昊\nGitHub：https://github.com/jiwangyihao/source-j-legado\n\n# 关于许可的额外声明（在线版本参见 GitHub，以在线版本为准）\n\n- 当许可证与本声明冲突时，以本声明为准；\n- 对于本仓库中的任意代码片段：按照 `MPL 2.0` 中有关约定执行；\n- 对于本仓库中的某一完整书源的转载或二次开发，需满足以下全部条件：\n  - 在[本仓库](https://github.com/jiwangyihao/source-j-legado)的 `issue` 中提出请求并具体说明转载地址、二次开发后的书源开源地址以及其他必要信息；\n  - 等待原作者（即本仓库的初始所有者和初始代码贡献者 [@jiwangyihao](https://github.com/jiwangyihao)）查看并通过 `issue` 或依据原作者要求更改转载方式或补充更详细的信息。\n  - 考虑到本项目弃坑的可能，新 `issue` 开启后超过 20 个工作日原作者没有回复或者原作者回复要求更改的 `issue` 在更改后超过 20 个工作日原作者没有回复即视为原作者通过该 `issue`：\n    - 此处的 `issue` 仅包括在[本仓库](https://github.com/jiwangyihao/source-j-legado)开启的，处于「开启状态」的 issue。（也就是说，请不要在已经关闭的 issue 中回复）。\n    - 对于此种方式通过的 issue，转载/二次开发者仍应当遵守本声明中已经写明的相关约定。\n  - 不得上传至源仓库或整理至`非轻小说专用`的书源合集中并应当避免其他人将转载/二次开发版本上传至源仓库或整理至`非轻小说专用`的书源合集中：\n    - 关于轻小说的定义的额外说明：不包括国内的原创网络文学作品（如 `SF 轻小说` 中的原创轻小说以及`起点中文网`中标签包含轻小说的作品）。\n    - 轻小说专用的定义：有且仅有想看轻小说的人可能会添加。\n  - 必须在转载/二次开发地址的明显位置完整包含本声明的全部内容。\n  - 必须保留源注释中原有的更改记录。\n\n搜索时只会搜索合集，加载目录失败很可能是这个合集是空的，无法处理[流汗滑稽]\n\n小说简介和正文都添加了评论，不想看的话可以把书源规则里相关代码删了\n\n默认图片样式是TEXT，这是为了方便看评论里的表情包（\n\n想看漫画的话可以自行更改为FULL\n\n漫画长时间处于加载中或者加载失败很可能是因为原帖中用的图床挂了或者被墙了，无法处理[流汗滑稽]\n\n发现没做一是因为里面各种类型的帖子混在一起，太复杂，二是因为我用不着[受虐滑稽]\n\n！！非常重要：\n使用前需要先登录，登录界面是电脑版网页，可能需要找一下登录按钮在哪[流汗滑稽]\n（不确定现在是不是还有）账号需要通过勇者测试\n点登录没反应可能是ip被ban了或者访问频率过高，着急的话可以换下ip\n\n2024.4.8\n酷安@吉王义昊\n使用JSON格式重写了部分规则\n处理了3.24.040501中无法使用的问题",
    "bookSourceGroup": "轻小说,需要登录",
    "bookSourceName": "lk轻之国度",
    "bookSourceType": 0,
    "bookSourceUrl": "https://www.lightnovel.us/",
    "bookUrlPattern": "",
    "customOrder": 0,
    "enabled": true,
    "enabledCookieJar": true,
    "enabledExplore": false,
    "header": "{\n  \"Referer\": \"https://www.lightnovel.us/\"\n}",
    "lastUpdateTime": 1712535538917,
    "loginUrl": "https://www.lightnovel.us/",
    "respondTime": 180000,
    "ruleBookInfo": {
      "author": "$.series.author",
      "coverUrl": "$.series.cover",
      "init": "<js>\njsContent=src.match(/<script>window.__NUXT__.+?<.script>/gi)[0].replace(/<.?script>/gi,'')\nwindow={}\neval(jsContent)\nJSON.stringify(window.__NUXT__.data)\n</js>\n$[0]",
      "intro": "@js:\nres=result.series.intro\nres+=\"\\n上传者：\\n\"\nresult.series.editors.forEach(i=>{\n  res+=`- 昵称：${i.nickname}|签名：${i.sign}|等级：${i.level.level}|${i.level.name}\\n`\n})\nif (result.comments) {\n  res+=\"\\n评论：\\n\"\n  result.comments.forEach(i=>{\n    res+=`- ${i.time}|${i.rate}星|${i.user_info.nickname}|${i.user_info.level.name}|${i.text}\\n`\n  })\n}\nres",
      "kind": "@js:\nres=[\"评分: \"+{{$.series.score}}]\nresult.series.editors.forEach(i=>res.push(i.nickname))\nif (result.series.name.match(/\\[.+?\\]/gi)) {\n  result.series.name.match(/\\[.+?\\]/gi).forEach(i=>res.push(i.replace(/[\\[\\]]/gi,'')));\n}\nres",
      "lastChapter": "$.series.articles[-1].title",
      "name": "$.series.name##\\[.+?\\]##"
    },
    "ruleContent": {
      "content": "@js:\njsContent=src.match(/<script>window.__NUXT__.+?<.script>/gi)[0].replace(/<.?script>/gi,'')\nwindow={}\neval(jsContent)\nres=window.__NUXT__.data[0].article.content\nif (comments=window.__NUXT__.data[0].comments) {\n  res+=\"\\n【评论】\\n\"\n  comments.list.forEach(i=>{\n    res+=`- ${i.content}\\n`\n  })\n}\nres",
      "imageStyle": "TEXT"
    },
    "ruleExplore": {},
    "ruleSearch": {
      "author": "$.author&&$.editors.*.nickname",
      "bookList": "$.data.list",
      "bookUrl": "https://www.lightnovel.us/cn/series/{{$.sid}}",
      "checkKeyWord": "最弱的驯养师开启的捡垃圾的旅途",
      "coverUrl": "$.cover",
      "intro": "@js:\nres=\"\\n上传者：\\n\"\nresult.editors.forEach(i=>{\n  res+=`- 昵称：${i.nickname}|签名：${i.sign}|等级：${i.level.level}|${i.level.name}\\n`\n})\nres",
      "kind": "@js:\nres=[result.group_name]\nif (result.name.match(/\\[.+?\\]/gi)) {\n  result.name.match(/\\[.+?\\]/gi).forEach(i=>res.push(i.replace(/[\\[\\]]/gi,'')));\n}\nresult.editors.forEach(i=>res.push(i.nickname))\nres",
      "name": "$.name##\\[.+?\\]##"
    },
    "ruleToc": {
      "chapterList": "@js:\njsContent=src.match(/<script>window.__NUXT__.+?<.script>/gi)[0].replace(/<.?script>/gi,'')\nwindow={}\neval(jsContent)\nwindow.__NUXT__.data[0].series.articles.map(i=>JSON.stringify(i))",
      "chapterName": "$.title",
      "chapterUrl": "https://www.lightnovel.us/cn/detail/{{$.aid}}",
      "updateTime": "$.time"
    },
    "searchUrl": "@js:\nurl='https://www.lightnovel.us/proxy/api/search/search-result';\nbody = {\n    \"is_encrypted\": 0,\n    \"platform\": \"pc\",\n    \"client\": \"web\",\n    \"sign\": \"\",\n    \"gz\": 0,\n    \"d\": {\n        \"q\": \"{{key}}\",\n        \"type\": 2,\n        \"page\": page,\n        \"security_key\": JSON.parse(decodeURIComponent(cookie.getKey(\"https://www.lightnovel.us/\",\"token\"))).security_key\n    }\n}\noption={\"method\":\"POST\",\"body\":JSON.stringify(body)};\noption.headers={ \"Content-Type\": \"application/json; charset=UTF-8\" };\njava.put('url',String(url+','+JSON.stringify(option)))",
    "weight": 0
  }
,

  {
    "bookSourceComment": "酷安 @吉王义昊\nGitHub：https://github.com/jiwangyihao/source-j-legado\n\n# 关于许可的额外声明（在线版本参见 GitHub，以在线版本为准）\n\n- 当许可证与本声明冲突时，以本声明为准；\n- 对于本仓库中的任意代码片段：按照 `MPL 2.0` 中有关约定执行；\n- 对于本仓库中的某一完整书源的转载或二次开发，需满足以下全部条件：\n  - 在[本仓库](https://github.com/jiwangyihao/source-j-legado)的 `issue` 中提出请求并具体说明转载地址、二次开发后的书源开源地址以及其他必要信息；\n  - 等待原作者（即本仓库的初始所有者和初始代码贡献者 [@jiwangyihao](https://github.com/jiwangyihao)）查看并通过 `issue` 或依据原作者要求更改转载方式或补充更详细的信息。\n  - 考虑到本项目弃坑的可能，新 `issue` 开启后超过 20 个工作日原作者没有回复或者原作者回复要求更改的 `issue` 在更改后超过 20 个工作日原作者没有回复即视为原作者通过该 `issue`：\n    - 此处的 `issue` 仅包括在[本仓库](https://github.com/jiwangyihao/source-j-legado)开启的，处于「开启状态」的 issue。（也就是说，请不要在已经关闭的 issue 中回复）。\n    - 对于此种方式通过的 issue，转载/二次开发者仍应当遵守本声明中已经写明的相关约定。\n  - 不得上传至源仓库或整理至`非轻小说专用`的书源合集中并应当避免其他人将转载/二次开发版本上传至源仓库或整理至`非轻小说专用`的书源合集中：\n    - 关于轻小说的定义的额外说明：不包括国内的原创网络文学作品（如 `SF 轻小说` 中的原创轻小说以及`起点中文网`中标签包含轻小说的作品）。\n    - 轻小说专用的定义：有且仅有想看轻小说的人可能会添加。\n  - 必须在转载/二次开发地址的明显位置完整包含本声明的全部内容。\n  - 必须保留源注释中原有的更改记录。\n\n2024.5.20\n酷安 @吉王义昊\n处理新版阅读目录加载失败问题",
    "bookSourceGroup": "轻小说",
    "bookSourceName": "真白萌",
    "bookSourceType": 0,
    "bookSourceUrl": "https://masiro.me",
    "bookUrlPattern": "",
    "customOrder": 6,
    "enabled": true,
    "enabledCookieJar": true,
    "enabledExplore": true,
    "exploreUrl": "@js:\nresult=[\n  {'title':'>> 论坛首页 <<','url':'','style':{layout_flexGrow:1,layout_flexBasisPercent:1}},\n  {'title':'全部','url':'https://masiro.me/admin/loadMoreNovels?page={{page}}&status=1&order=2','style':{layout_flexGrow:1,layout_flexBasisPercent:0.25}},\n  {'title':'日轻','url':'https://masiro.me/admin/loadMoreNovels?page={{page}}&order=2&ori=0','style':{layout_flexGrow:1,layout_flexBasisPercent:0.25}},\n  {'title':'原创','url':'https://masiro.me/admin/loadMoreNovels?page={{page}}&order=2&ori=1','style':{layout_flexGrow:1,layout_flexBasisPercent:0.25}},\n  {'title':'最近更新','url':'https://masiro.me/admin/loadMoreNovels?page={{page}}&order=1','style':{layout_flexGrow:1,layout_flexBasisPercent:0.25}},\n  {'title':'收藏','url':'https://masiro.me/admin/loadMoreNovels?page={{page}}&collection=1','style':{layout_flexGrow:1,layout_flexBasisPercent:0.25}}\n]\nhtml=org.jsoup.Jsoup.parse(java.ajax('https://masiro.me/admin/novels'))\ntagLines=html.select('.nv-tags-box>.tag-line, #tagcks>.tag-line')\ntagLines.forEach(tagLine => {\n  result.push({\n    'title': '>> ' + tagLine.select('.line-tit').text() + ' <<',\n    'url':'',\n    'style':{\n      layout_flexGrow:1,\n      layout_flexBasisPercent:1\n    }\n  })\n  tagLine.select('.ck.tgs').forEach(tag => {\n    result.push({\n      'title':tag.text(),\n      'url':`/admin/loadMoreNovels?page={{page}}&tags=${tag.select('.tag-ck').attr('value')}&order=2`,\n      'style':{\n        layout_flexGrow:2,\n        layout_flexBasisPercent:0.25\n      \t}\n    })\n  })\n})\nJSON.stringify(result)",
    "header": "{\n\"Referer\":\"https://masiro.me/\",\n\"User-Agent\":\"\"\n}",
    "jsLib": "",
    "lastUpdateTime": 1718621919484,
    "loginUrl": "/admin/auth/login",
    "respondTime": 180000,
    "ruleBookInfo": {
      "author": "class.author@tag.a@text",
      "canReName": "true",
      "coverUrl": "",
      "init": "@js:\nif (java.getString('class.content@text') == '小孩子不能看') {\n  java.toast(\"等级不足\")\n  time = new Date().getTime()\n  while(new Date().getTime() - time<2000){}\n  throw('等级不足')\n} else\n  src",
      "intro": "-\n更新时间：{{@@.n-update@class.s-font@text}}\n标签：{{@@.tags@tag.a@text##\\s## - }}\n{{@@.brief@html##简介：}}",
      "kind": "{{@@.n-chapters@text##字数 : .+字}}\n{{@@.n-status@text##状态 : }}\n{{@@.n-translator@text}}\n{{@@.tags@tag.a@text}}",
      "lastChapter": "class.n-update@text##更新 : ",
      "name": "class.novel-title@text",
      "wordCount": "class.n-chapters@text##字数 : |共.+话|字"
    },
    "ruleContent": {
      "content": "@js:\nif (`{{@@.pay@text}}` == '立即打钱')\n  `<img src=\"/images/打钱.png\" alt=\"打钱.png\">\n  立即打钱\n  Cost：{{@@.cost@value}} 金币`\nelse\n  `{{@@.nvl-content@html}}`",
      "imageStyle": "FULL",
      "payAction": "java.setContent(java.ajax(source.bookSourceUrl + baseUrl))\nlet body = `type=${java.getString('class.type@value')}&object_id=${java.getString('class.object_id@value')}&cost=${java.getString('class.cost@value')}`\nlet url = source.bookSourceUrl + '/admin/pay'\nlet res = java.post(url, body, {\n  \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n  \"Referer\": baseUrl,\n  \"X-Csrf-Token\": java.getString(\"class.csrf@value\"),\n  \"X-Requested-With\": \"XMLHttpRequest\"\n})\njava.toast(JSON.parse(res.body()).msg)",
      "replaceRegex": ""
    },
    "ruleExplore": {
      "author": "",
      "bookList": "",
      "bookUrl": "",
      "intro": "",
      "kind": "",
      "lastChapter": "",
      "name": "",
      "wordCount": ""
    },
    "ruleSearch": {
      "author": "$.author",
      "bookList": "$.novels",
      "bookUrl": "https://masiro.me/admin/novelView?novel_id={{$.id}}",
      "coverUrl": "$.cover_img",
      "intro": "$.brief",
      "kind": "{{$.hs}}话\n{{$.translators..name}}\nLv{{$.lv_limit}}\n{{$.tags..name}}",
      "lastChapter": "$.new_up_content",
      "name": "$.title",
      "wordCount": "$.words"
    },
    "ruleToc": {
      "chapterList": "@js:\nvolumns=JSON.parse(String(java.getString('id.f-chapters-json@html')).replace(/<.?script[^<>]*>/gi,''))\nvolumns.forEach(volumn=> {\n  volumn.children=[]\n})\nchapters=JSON.parse(String(java.getString('id.chapters-json@html')).replace(/<.?script[^<>]*>/gi,''))\nchapters.forEach(chapter=>{\n  volumns.forEach(volumn=> {\n  \t  if (chapter.parent_id===volumn.id)\n  \t    volumn.children.push(chapter)\n  \t})\n})\nresult=[]\nvolumns.forEach(volumn => {\n  result.push(JSON.stringify(volumn))\n  volumn.children.forEach(chapter => {\n    result.push(JSON.stringify(chapter))\n  \t})\n})\n//java.log(JSON.stringify(result))\nresult",
      "chapterName": "@js:\n$=JSON.parse(result);\n$.title + ($.describe ? `- ${$.describe}` : '')",
      "chapterUrl": "@js:\n$=JSON.parse(result)\n!!$.children ? '' : `/admin/novelReading?cid=${$.id}`",
      "isVip": "@js:\nJSON.parse(result).cost > 0",
      "isVolume": "@js:\n!!JSON.parse(result).children",
      "updateTime": "@js:\n$=JSON.parse(result);\n($.cost > 0 ? `${$.cost}G - ` : '') + ($.episode_update_time ? $.episode_update_time : '')"
    },
    "searchUrl": "/admin/loadMoreNovels?page={{page}}&keyword={{key}}",
    "weight": 0
  }
,

  {
    "bookSourceComment": "酷安 @吉王义昊\nGitHub：https://github.com/jiwangyihao/source-j-legado\n\n# 关于许可的额外声明（在线版本参见 GitHub，以在线版本为准）\n\n- 当许可证与本声明冲突时，以本声明为准；\n- 对于本仓库中的任意代码片段：按照 `MPL 2.0` 中有关约定执行；\n- 对于本仓库中的某一完整书源的转载或二次开发，需满足以下全部条件：\n  - 在[本仓库](https://github.com/jiwangyihao/source-j-legado)的 `issue` 中提出请求并具体说明转载地址、二次开发后的书源开源地址以及其他必要信息；\n  - 等待原作者（即本仓库的初始所有者和初始代码贡献者 [@jiwangyihao](https://github.com/jiwangyihao)）查看并通过 `issue` 或依据原作者要求更改转载方式或补充更详细的信息。\n  - 考虑到本项目弃坑的可能，新 `issue` 开启后超过 20 个工作日原作者没有回复或者原作者回复要求更改的 `issue` 在更改后超过 20 个工作日原作者没有回复即视为原作者通过该 `issue`：\n    - 此处的 `issue` 仅包括在[本仓库](https://github.com/jiwangyihao/source-j-legado)开启的，处于「开启状态」的 issue。（也就是说，请不要在已经关闭的 issue 中回复）。\n    - 对于此种方式通过的 issue，转载/二次开发者仍应当遵守本声明中已经写明的相关约定。\n  - 不得上传至源仓库或整理至`非轻小说专用`的书源合集中并应当避免其他人将转载/二次开发版本上传至源仓库或整理至`非轻小说专用`的书源合集中：\n    - 关于轻小说的定义的额外说明：不包括国内的原创网络文学作品（如 `SF 轻小说` 中的原创轻小说以及`起点中文网`中标签包含轻小说的作品）。\n    - 轻小说专用的定义：有且仅有想看轻小说的人可能会添加。\n  - 必须在转载/二次开发地址的明显位置完整包含本声明的全部内容。\n  - 必须保留源注释中原有的更改记录。",
    "bookSourceGroup": "轻小说",
    "bookSourceName": "rezero",
    "bookSourceType": 0,
    "bookSourceUrl": "https://re0zero.top",
    "customOrder": -72,
    "enabled": true,
    "enabledCookieJar": true,
    "enabledExplore": true,
    "lastUpdateTime": 1711502232991,
    "respondTime": 180000,
    "ruleBookInfo": {
      "author": "<js>\nr=\"长月达平\"\n</js>",
      "coverUrl": "@js:\nsource.bookSourceUrl + '/gitbook/res/imgs/article/chapter010/00-a.jpg'",
      "intro": "<js>\nr=`走出便利商店要回家的高中生 菜月・昴（Natsuki・Subaru） 突然被召唤到异世界。\n\n这莫非就是很流行的异世界召唤！？可是眼前没有召唤者就算了，还遭遇强盗迅速面临性命危机。\n\n这时，一名神秘银发美少女和猫精灵拯救了一筹莫展的他。\n\n以报恩为名义，昴自告奋勇要帮助少女找回失物。\n\n然而，好不容易才掌握到线索，昴和少女却被不明人士攻击而殒命 ── 本来应该是这样，但回过神来，昴却发现自己置身在第一次被召唤到这个异世界时的所在位置。\n\n『死亡回归』 —— 无力的少年得到的唯一能力，是死后时间会倒转回到一开始。\n\n※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※\n\n仅仅是作为没有被赋予任何关于异世界知识、技能、力量的普通人，挣扎求存。 他唯一得到的祝福就是 「重生」 —— 触发条件是痛苦的 『死亡』 ！\n\n他死了多少次？ 历经多少死亡方式（剧透慎点）？ 在不可靠的世界种如何夺取希望之物？\n\n但即使跨越无数血液、尸体和绝望，也要从死亡的命运中拯救少女！`\n</js>",
      "name": "<js>\njava.get('is')==1?\"Re:从零开始的异世界生活\":''\n</js>"
    },
    "ruleContent": {
      "content": "class.markdown-section@html\n\n<js>\nresult=result.replace(new RegExp('.+anchor-navigation-ex-navbar[\\\\s\\\\S]+\\\\/h1.+','gi'),'')\nresult=result.replace(new RegExp('.+footer[\\\\s\\\\S]+\\\\/footer.+','gi'),'')\njava.log(result)\n</js>",
      "imageStyle": ""
    },
    "ruleExplore": {},
    "ruleSearch": {
      "author": "<js>\n\"长月达平\"\n</js>",
      "bookList": "<js>\nname='Re:从零开始的异世界生活长月达平RE0'\nif (name.match(java.get('key'))) {\n\t   java.put('is',1)\n    r=[\"\"]\n} else {\n\t   java.put('is',0)\n    r=[]\n}\nr\n</js>",
      "bookUrl": "@js:\nsource.bookSourceUrl + \"/gitbook/book/\"",
      "checkKeyWord": "Re:从零开始的异世界生活",
      "coverUrl": "@js:\nsource.bookSourceUrl + '/gitbook/res/imgs/article/chapter010/00-a.jpg'",
      "intro": "<js>\n`走出便利商店要回家的高中生 菜月・昴（Natsuki・Subaru） 突然被召唤到异世界。\n\n这莫非就是很流行的异世界召唤！？可是眼前没有召唤者就算了，还遭遇强盗迅速面临性命危机。\n\n这时，一名神秘银发美少女和猫精灵拯救了一筹莫展的他。\n\n以报恩为名义，昴自告奋勇要帮助少女找回失物。\n\n然而，好不容易才掌握到线索，昴和少女却被不明人士攻击而殒命 ── 本来应该是这样，但回过神来，昴却发现自己置身在第一次被召唤到这个异世界时的所在位置。\n\n『死亡回归』 —— 无力的少年得到的唯一能力，是死后时间会倒转回到一开始。\n\n※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※\n\n仅仅是作为没有被赋予任何关于异世界知识、技能、力量的普通人，挣扎求存。 他唯一得到的祝福就是 「重生」 —— 触发条件是痛苦的 『死亡』 ！\n\n他死了多少次？ 历经多少死亡方式（剧透慎点）？ 在不可靠的世界种如何夺取希望之物？\n\n但即使跨越无数血液、尸体和绝望，也要从死亡的命运中拯救少女！`\n</js>",
      "name": "<js>\n\"Re:从零开始的异世界生活\"\n</js>"
    },
    "ruleToc": {
      "chapterList": "class.chapter\n<js>\nres=[]\nresult.forEach(item=>{\n     java.setContent(item);\n     if (java.getString(\"tag.li.0@data-level\").match(new RegExp('^2','gi'))) {\n     \t     res.push(item);\n     \t}\n})\nres\n</js>",
      "chapterName": "tag.a.0@text",
      "chapterUrl": "tag.a.0@href",
      "isVolume": "@js:\njava.getString(\"tag.li.0@data-level\").match(new RegExp('\\\\.','gi')).length<2"
    },
    "searchUrl": "https://baidu.com?key={{java.put('key',key)}}",
    "weight": 0
  }
,

  {
    "bookSourceComment": "！！！请务必先登录\n\n酷安 @吉王义昊\nGitHub：https://github.com/jiwangyihao/source-j-legado\n\n# 关于许可的额外声明（在线版本参见 GitHub，以在线版本为准）\n\n- 当许可证与本声明冲突时，以本声明为准；\n- 对于本仓库中的任意代码片段：按照 `MPL 2.0` 中有关约定执行；\n- 对于本仓库中的某一完整书源的转载或二次开发，需满足以下全部条件：\n  - 在[本仓库](https://github.com/jiwangyihao/source-j-legado)的 `issue` 中提出请求并具体说明转载地址、二次开发后的书源开源地址以及其他必要信息；\n  - 等待原作者（即本仓库的初始所有者和初始代码贡献者 [@jiwangyihao](https://github.com/jiwangyihao)）查看并通过 `issue` 或依据原作者要求更改转载方式或补充更详细的信息。\n  - 考虑到本项目弃坑的可能，新 `issue` 开启后超过 20 个工作日原作者没有回复或者原作者回复要求更改的 `issue` 在更改后超过 20 个工作日原作者没有回复即视为原作者通过该 `issue`：\n    - 此处的 `issue` 仅包括在[本仓库](https://github.com/jiwangyihao/source-j-legado)开启的，处于「开启状态」的 issue。（也就是说，请不要在已经关闭的 issue 中回复）。\n    - 对于此种方式通过的 issue，转载/二次开发者仍应当遵守本声明中已经写明的相关约定。\n  - 不得上传至源仓库或整理至`非轻小说专用`的书源合集中并应当避免其他人将转载/二次开发版本上传至源仓库或整理至`非轻小说专用`的书源合集中：\n    - 关于轻小说的定义的额外说明：不包括国内的原创网络文学作品（如 `SF 轻小说` 中的原创轻小说以及`起点中文网`中标签包含轻小说的作品）。\n    - 轻小说专用的定义：有且仅有想看轻小说的人可能会添加。\n  - 必须在转载/二次开发地址的明显位置完整包含本声明的全部内容。\n  - 必须保留源注释中原有的更改记录。\n\n2023.10.12\n酷安 @吉王义昊\n源仓库里那个规则已经旧到完全无法导入了（怕不是2.0的）\n大概试了下，原来的那些规则倒是都还能用\n不过还有点bug，而且很多信息不全\n就稍微完善了一下\n- 处理了搜索列表规则，现在不会和详情页混淆\n- 处理了标签的展示形式\n- 完善了详情页规则\n- 目录获取并标识卷名\n- 解决了旧规则的乱码问题\n- 为已下架的书添加了「已下架」标签\n- 完善了发现页\n2023.10.13\n酷安 @吉王义昊\n- 解决了部分书籍无法正常加载的问题\n- 现在已下架的书也可以正常阅读了\n- 解决了已下架的书在发现页无法正常加载的问题\n2023.10.14\n酷安 @吉王义昊\n- 解决了发现页中排行榜获取到的链接不对的问题\n2023.10.22\n酷安 @吉王义昊\n- 现在可以同时搜索作者和书名（但每一页的加载时间都增加至少5秒）\n2023.10.25\n酷安 @吉王义昊\n- 使用 cookie 中的时间计算延迟\n- 现在连续搜索时会自动延迟\n- 添加延迟时提示消息\n2024.2.7\n酷安 @吉王义昊\n- 更换域名（不好意思，之前忘了）",
    "bookSourceGroup": "轻小说,需要登录",
    "bookSourceName": "轻小说文库",
    "bookSourceType": 0,
    "bookSourceUrl": "https://www.wenku8.cc",
    "concurrentRate": "",
    "customOrder": -74,
    "enabled": true,
    "enabledCookieJar": true,
    "enabledExplore": true,
    "exploreUrl": "@js:\nres=[]\ncontent=java.ajax(source.bookSourceUrl+\"/modules/article/articlelist.php?class=\")\nres.push({title:'分类阅读',url:'',style:{layout_flexGrow:1,layout_flexBasisPercent:1}})\ncontent.match(/分类阅读[\\s\\S]+Tags云集/gi)[0].match(/<a.+<\\/a>/gi).forEach(a=>{\n    res.push({title:a.match(/>.+(?=<)/gi)[0].replace('>',''),url:a.match(/\\\".+(?=\\\")/gi)[0].replace('\"','')+\"&page={{page}}\",style:{layout_flexGrow:1,layout_flexBasisPercent:0.25}})\n})\nres.push({title:'日常系属性Tags',url:'',style:{layout_flexGrow:1,layout_flexBasisPercent:1}})\ncontent.match(/日常系属性Tags[\\s\\S]+幻想系属性Tags/gi)[0].match(/<a.+<\\/a>/gi).forEach(a=>{\n    res.push({title:a.match(/>.+(?=<)/gi)[0].replace('>',''),url:source.bookSourceUrl+'/modules/article/'+a.match(/=.+(?=>.+<)/gi)[0].replace(/^=/i,'')+\"&page={{page}},{'charset': 'gbk'}\",style:{layout_flexGrow:1,layout_flexBasisPercent:0.25}})\n})\nres.push({title:'幻想系属性Tags',url:'',style:{layout_flexGrow:1,layout_flexBasisPercent:1}})\ncontent.match(/幻想系属性Tags[\\s\\S]+黑深残属性Tags/gi)[0].match(/<a.+<\\/a>/gi).forEach(a=>{\n    res.push({title:a.match(/>.+(?=<)/gi)[0].replace('>',''),url:source.bookSourceUrl+'/modules/article/'+a.match(/=.+(?=>.+<)/gi)[0].replace(/^=/i,'')+\"&page={{page}},{'charset': 'gbk'}\",style:{layout_flexGrow:1,layout_flexBasisPercent:0.25}})\n})\nres.push({title:'黑深残属性Tags',url:'',style:{layout_flexGrow:1,layout_flexBasisPercent:1}})\ncontent.match(/黑深残属性Tags[\\s\\S]+人物属性类Tags/gi)[0].match(/<a.+<\\/a>/gi).forEach(a=>{\n    res.push({title:a.match(/>.+(?=<)/gi)[0].replace('>',''),url:source.bookSourceUrl+'/modules/article/'+a.match(/=.+(?=>.+<)/gi)[0].replace(/^=/i,'')+\"&page={{page}},{'charset': 'gbk'}\",style:{layout_flexGrow:1,layout_flexBasisPercent:0.25}})\n})\nres.push({title:'人物属性类Tags',url:'',style:{layout_flexGrow:1,layout_flexBasisPercent:1}})\ncontent.match(/人物属性类Tags[\\s\\S]+特殊属性类Tags/gi)[0].match(/<a.+<\\/a>/gi).forEach(a=>{\n    res.push({title:a.match(/>.+(?=<)/gi)[0].replace('>',''),url:source.bookSourceUrl+'/modules/article/'+a.match(/=.+(?=>.+<)/gi)[0].replace(/^=/i,'')+\"&page={{page}},{'charset': 'gbk'}\",style:{layout_flexGrow:1,layout_flexBasisPercent:0.25}})\n})\nres.push({title:'特殊属性类Tags',url:'',style:{layout_flexGrow:1,layout_flexBasisPercent:1}})\ncontent.match(/特殊属性类Tags[\\s\\S]+排 行 榜/gi)[0].match(/<a.+<\\/a>/gi).forEach(a=>{\n    res.push({title:a.match(/>.+(?=<)/gi)[0].replace('>',''),url:source.bookSourceUrl+'/modules/article/'+a.match(/=.+(?=>.+<)/gi)[0].replace(/^=/i,'')+\"&page={{page}},{'charset': 'gbk'}\",style:{layout_flexGrow:1,layout_flexBasisPercent:0.25}})\n})\nres.push({title:'排行榜',url:'',style:{layout_flexGrow:1,layout_flexBasisPercent:1}})\ncontent.match(/排 行 榜[\\s\\S]+小说搜索/gi)[0].match(/<a[^&\\n]+<\\/a>/gi).forEach(a=>{\n    res.push({title:a.match(/>.+?(?=<)/i)[0].replace('>',''),url:a.match(/\\\".+(?=\\\")/gi)[0].replace('\"','')+\"&page={{page}}\",style:{layout_flexGrow:1,layout_flexBasisPercent:0.25}})\n})\nJSON.stringify(res)",
    "lastUpdateTime": 1711502224009,
    "loginCheckJs": "",
    "loginUrl": "/login.php",
    "respondTime": 180000,
    "ruleBookInfo": {
      "author": "id.content@tag.tbody.0@tag.tr.-1@tag.td.1@text##小说作者：",
      "coverUrl": "id.content@.0@.3@.0@.0@tag.img@src",
      "intro": "//span[6]",
      "kind": "id.content@.0@.3@.0@.0@.1@tag.span.0@text##作品Tags：\n@js:\nres=[]\nresult.forEach(item=>{\n    item.split(\" \").forEach(i=>res.push(i))\n})\nres",
      "lastChapter": "//td[2]/span[4]/a/text()",
      "name": "id.content@tag.td.0@tag.td.0@tag.b@text",
      "tocUrl": "text.小说目录@href",
      "wordCount": "id.content@tag.tbody.0@tag.tr.-1@tag.td.4@text##全文长度："
    },
    "ruleContent": {
      "content": "id.content@html##本文来自.*|最新.*一网打尽！\n@js:\nencode = function(str) {\n\t\t\treturn '&appver=1.13&request=' + java.base64Encode(str) + '&timetoken=' + (new Date().getTime());\n\t\t};\nif (result.match(\"不再提供该小说\")) {\n\t   response=java.post(\n\t   \t    \"http://app.wenku8.com/android.php\",\n\t   \t    encode('action=book&do=text&aid=' + baseUrl.match(/\\/(\\d+)(?=\\/|\\.htm)/gi)[1].replace('/','') + '&cid=' + baseUrl.match(/\\/(\\d+)(?=\\/|\\.htm)/gi)[2].replace('/','') + '&t=0'),\n\t   \t    {\n\t\t\t\t\t       'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t\t\t       'User-Agent': 'Dalvik/2.1.0 (Linux; U; Android 7.1.2; unknown Build/NZH54D)'\n        })\n    response.body().replace('<!--image-->http','<img src=\"http').replace('jpg<!--image-->','jpg\">')\n} else {\n\t   result\n}"
    },
    "ruleExplore": {
      "author": "//div[2]/p[1]/text()##/分类.*",
      "bookList": "//div[@id='content']//td/div",
      "bookUrl": "//div[2]/b/a/@href",
      "coverUrl": "img@src",
      "intro": "//p[4]##.+简介:",
      "kind": "//p[3]/span/text()&&//p[2]/text()##更新:|字数:\n@js:\nres=[]\nresult.forEach(item=>{\n    item.split(new RegExp(\"[ \\/]\",\"gi\")).forEach(i=>res.push(i))\n})\nres",
      "name": "//div[2]/b/a/@title"
    },
    "ruleSearch": {
      "author": "//div[2]/p[1]##(.+作者:)|(/分类:.+)",
      "bookList": "<js>\n//搜索词\njava.toast('书名搜索成功，5s后开始作者搜索')\nwhile(new Date().getTime()-Number(cookie.getKey(source.bookSourceUrl,'jieqiVisitTime').replace('jieqiArticlesearchTime%3D',''))*1000<6000){}\nkey = java.get(\"key\")\npage = java.get(\"page\")\n//拼接搜索作者链接\nurl = `${source.bookSourceUrl}/modules/article/search.php?searchtype=author&searchkey=${key}&page=${page},{\n    \"charset\": \"gbk\"\n}`\ncombineHtml = result + java.ajax(url)\ncombineHtml\n</js>\n@css:#content>table td>div",
      "bookUrl": "//div[2]/b/a/@href",
      "checkKeyWord": "无职转生",
      "coverUrl": "img@src",
      "intro": "//p[4]##.+简介:",
      "kind": "//p[3]/span/text()&&//p[2]/text()&&//p[5]/text()##更新:|字数:\n@js:\nres=[]\nresult.forEach(item=>{\n    if (item.match(\"已经下架\")) res.unshift(\"已下架\")\n    else item.split(new RegExp(\"[ \\/]\",\"gi\")).forEach(i=>res.push(i))\n})\n\nres",
      "name": "//div[2]/b/a/@title",
      "wordCount": ""
    },
    "ruleToc": {
      "chapterList": "class.css@tag.td",
      "chapterName": "text",
      "chapterUrl": "tag.a@href",
      "isVolume": "<js>java.getString(\"tag.a@text\")==\"\"?true:false</js>"
    },
    "searchUrl": "/modules/article/search.php?searchtype=articlename&searchkey={{java.put('key',key)}}&page={{java.put('page',page)}},{\n    \"charset\": \"gbk\"\n}\n@js:\nif(new Date().getTime()-Number(cookie.getKey('http://www.wenku8.net','jieqiVisitTime').replace('jieqiArticlesearchTime%3D',''))*1000<6000){\n  java.toast('搜索频率过高，延迟'+(new Date().getTime()-Number(cookie.getKey(source.bookSourceUrl,'jieqiVisitTime').replace('jieqiArticlesearchTime%3D',''))*1000)/1000+'秒后继续')\n}\n//java.sleep(10)\nwhile(new Date().getTime()-Number(cookie.getKey(source.bookSourceUrl,'jieqiVisitTime').replace('jieqiArticlesearchTime%3D',''))*1000<6000){}\nresult",
    "weight": 0
  }
,

  {
    "bookSourceComment": "酷安 @吉王义昊\nGitHub：https://github.com/jiwangyihao/source-j-legado\n\n# 关于许可的额外声明（在线版本参见 GitHub，以在线版本为准）\n\n- 当许可证与本声明冲突时，以本声明为准；\n- 对于本仓库中的任意代码片段：按照 `MPL 2.0` 中有关约定执行；\n- 对于本仓库中的某一完整书源的转载或二次开发，需满足以下全部条件：\n  - 在[本仓库](https://github.com/jiwangyihao/source-j-legado)的 `issue` 中提出请求并具体说明转载地址、二次开发后的书源开源地址以及其他必要信息；\n  - 等待原作者（即本仓库的初始所有者和初始代码贡献者 [@jiwangyihao](https://github.com/jiwangyihao)）查看并通过 `issue` 或依据原作者要求更改转载方式或补充更详细的信息。\n  - 考虑到本项目弃坑的可能，新 `issue` 开启后超过 20 个工作日原作者没有回复或者原作者回复要求更改的 `issue` 在更改后超过 20 个工作日原作者没有回复即视为原作者通过该 `issue`：\n    - 此处的 `issue` 仅包括在[本仓库](https://github.com/jiwangyihao/source-j-legado)开启的，处于「开启状态」的 issue。（也就是说，请不要在已经关闭的 issue 中回复）。\n    - 对于此种方式通过的 issue，转载/二次开发者仍应当遵守本声明中已经写明的相关约定。\n  - 不得上传至源仓库或整理至`非轻小说专用`的书源合集中并应当避免其他人将转载/二次开发版本上传至源仓库或整理至`非轻小说专用`的书源合集中：\n    - 关于轻小说的定义的额外说明：不包括国内的原创网络文学作品（如 `SF 轻小说` 中的原创轻小说以及`起点中文网`中标签包含轻小说的作品）。\n    - 轻小说专用的定义：有且仅有想看轻小说的人可能会添加。\n  - 必须在转载/二次开发地址的明显位置完整包含本声明的全部内容。\n  - 必须保留源注释中原有的更改记录。",
    "bookSourceGroup": "漫画",
    "bookSourceName": "再漫画",
    "bookSourceType": 0,
    "bookSourceUrl": "https://manhua.zaimanhua.com/",
    "customOrder": -41328,
    "enabled": true,
    "enabledCookieJar": true,
    "enabledExplore": true,
    "lastUpdateTime": 1726801514321,
    "respondTime": 180000,
    "ruleBookInfo": {
      "author": "$..authorName",
      "coverUrl": "$..cover",
      "init": "@js:\njava.put('bid', `{{$..id}}`)\nresult",
      "intro": "$..description",
      "kind": "{{$..status}}\n{{$..readerGroup}}\n{{$..types##/##,}}",
      "lastChapter": "$..lastUpdateChapterName",
      "name": "$..comicInfo.title"
    },
    "ruleContent": {
      "content": "$..page_url\n@js:\nJSON.parse(result).map(url=>`<img src=\"${url}\">`).join('\\n')"
    },
    "ruleExplore": {},
    "ruleSearch": {
      "author": "class.auth@text",
      "bookList": "class.update_con@tag.li",
      "bookUrl": "https://manhua.zaimanhua.com/api/v1/comic1/comic/detail?channel=%20pc&app_name=zmh&version=1.0.0&comic_py={{@@class.title@tag.a@href##.+info.(\\w+).html##$1}}",
      "coverUrl": "tag.img@src",
      "name": "class.title@text"
    },
    "ruleToc": {
      "chapterList": "$..chapterList\n@js:\nresult = JSON.parse(result)[0]\nres = []\nresult.reverse().forEach(v=>{\n  res.push(JSON.stringify({\n    chapter_title: v.title,\n    isV: true\n  }))\n  v.data.reverse().forEach(c=>{\n    res.push(JSON.stringify(c))\n  })\n})\nres",
      "chapterName": "$.chapter_title",
      "chapterUrl": "@js:\nresult = JSON.parse(result)\nresult.isV? '' : `https://manhua.zaimanhua.com/api/v1/comic1/chapter/detail?channel=pc&app_name=zmh&version=1.0.0&comic_id=${java.get('bid')}&chapter_id=${result.chapter_id}`",
      "isVolume": "$.isV"
    },
    "searchUrl": "https://manhua.zaimanhua.com/dynamic/{{key}}",
    "weight": 0
  }
]
